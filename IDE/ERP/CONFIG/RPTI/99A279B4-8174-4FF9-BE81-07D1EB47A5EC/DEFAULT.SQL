EXECUTE BLOCK (
   Q_DATE_FROM    TYPE OF COLUMN TABL$J_4.DATE_COMMIT = ?DATE_FROM
  ,Q_DATE_TO      TYPE OF COLUMN TABL$J_4.DATE_COMMIT = ?DATE_TO
  ,Q_FIRM_IDS     TYPE OF COLUMN TABL$J_4.DOCSTR      = ?FIRM_IDS
  ,Q_ACC_ID       TYPE OF COLUMN TABL$R_BUHG_ACCS.ID  = ?ACC_ID
  ,Q_FLAG_FILIALS TYPE OF COLUMN TABL$J_4.FLAG_COMMIT = ?FLAG_FILIALS
  ,Q_FLAG_FILIAL  TYPE OF COLUMN TABL$J_4.FLAG_COMMIT = ?FLAG_FILIAL
  ,Q_FILIAL_ID    TYPE OF COLUMN TABL$R_FILIALS.ID    = ?FILIAL_ID
)RETURNS(
   DATE_FROM      TYPE OF COLUMN TABL$J_4.DATE_COMMIT
  ,DATE_TO        TYPE OF COLUMN TABL$J_4.DATE_COMMIT
  ,FIRM_IDS       TYPE OF COLUMN TABL$J_4.DOCSTR
  ,ACC_ID         TYPE OF COLUMN TABL$R_BUHG_ACCS.ID
  ,ACC_NAME       TYPE OF COLUMN TABL$R_BUHG_ACCS.NAME
  ,FIRM_ID        TYPE OF COLUMN TABL$P_CND.FIRM_ID
  ,FIRM_NAME      TYPE OF COLUMN TABL$P_CND.NAME
  ,FILIAL_ID      TYPE OF COLUMN TABL$P_CND.FILIAL_ID
  ,FILIAL_NAME    TYPE OF COLUMN TABL$P_CND.NAME
  ,SUBKONTO_ID    TYPE OF COLUMN TABL$P_CND.SUBKONTO_ID_DEB
  ,SUBKONTO_NAME  TYPE OF COLUMN TABL$P_CND.SUBKONTO_NAME_DEB
  ,SALDOBEG       TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,SALDOBEG_DEB   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,SALDOBEG_KRD   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,SALDO_DEBET    TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,SALDO_KREDIT   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,SALDOEND       TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,SALDOEND_DEB   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,SALDOEND_KRD   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANTBEG       TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANTBEG_DEB   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANTBEG_KRD   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANT_DEBET    TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANT_KREDIT   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANTEND       TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANTEND_DEB   TYPE OF COLUMN TABL$P_CND.CND_VALUE
  ,QUANTEND_KRD   TYPE OF COLUMN TABL$P_CND.CND_VALUE
)AS
  DECLARE VARIABLE P_FILIAL_ID TYPE OF COLUMN TABL$P_CND.FILIAL_ID;
BEGIN
  P_FILIAL_ID = NULL;
  IF(:Q_FLAG_FILIAL = 1)THEN 
    P_FILIAL_ID = :Q_FILIAL_ID;
  
  DATE_FROM = :Q_DATE_FROM;
  DATE_TO   = :Q_DATE_TO;
  FIRM_IDS  = :Q_FIRM_IDS;
  FOR
    SELECT TMP.FIRM_ID, TMP.FILIAL_ID, TMP.ACC_ID, TMP.SUBKONTO_ID
          ,(SELECT FIRST 1 P.SUBKONTO_NAME FROM PROC$R_BUHG_ACCS_SUBKONTO(TMP.ACC_ID, TMP.SUBKONTO_ID) P) AS SUBKONTO_NAME
    FROM   (
            SELECT DISTINCT H.FIRM_ID, IIF(:Q_FLAG_FILIALS=1, H.FILIAL_ID, NULL) AS FILIAL_ID, H.ACC_ID, H.SUBKONTO_ID
            FROM   (SELECT C1.FIRM_ID, C1.FILIAL_ID, C1.ACC_ID_DEB AS ACC_ID, C1.SUBKONTO_ID_DEB AS SUBKONTO_ID
                    FROM   TABL$P_CND C1
                    WHERE  (:FIRM_IDS      CONTAINING '~'||C1.FIRM_ID||'~')
                      AND  ( (C1.FILIAL_ID = :P_FILIAL_ID) OR (:P_FILIAL_ID IS NULL) )
                      AND  (C1.ACC_IDS_DEB CONTAINING '~'||:Q_ACC_ID||'~')
                    UNION ALL
                    SELECT C1.FIRM_ID, IIF(:Q_FLAG_FILIALS=1,C1.FILIAL_ID, NULL) AS FILIAL_ID, C1.ACC_ID_KRED AS ACC_ID, C1.SUBKONTO_ID_KRED AS SUBKONTO_ID
                    FROM   TABL$P_CND C1
                    WHERE  (:FIRM_IDS       CONTAINING '~'||C1.FIRM_ID||'~')
                      AND  ( (C1.FILIAL_ID = :P_FILIAL_ID) OR (:P_FILIAL_ID IS NULL) )
                      AND  (C1.ACC_IDS_KRED CONTAINING '~'||:Q_ACC_ID||'~')
                    ) H
           )TMP         
    ORDER BY SUBKONTO_NAME       
    INTO   :FIRM_ID, :FILIAL_ID, :ACC_ID, :SUBKONTO_ID, :SUBKONTO_NAME
  DO
    BEGIN
    FIRM_NAME   = '';
    FILIAL_NAME = '';
    ACC_NAME    = '';
    SELECT FIRST 1 F1.NAME FROM TABL$R_FIRMS     F1 WHERE (F1.ID = :FIRM_ID  )INTO :FIRM_NAME;
    SELECT FIRST 1 F2.NAME FROM TABL$R_FILIALS   F2 WHERE (F2.ID = :FILIAL_ID)INTO :FILIAL_NAME;
    SELECT FIRST 1 B1.NAME FROM TABL$R_BUHG_ACCS B1 WHERE (B1.ID = :ACC_ID   )INTO :ACC_NAME;
    
    SELECT COALESCE(SUM(C.CND_VALUE),0), COALESCE(SUM(C.SUBKONTO_QUANT_DEB),0)
    FROM   TABL$P_CND C
    WHERE  (C.DATE_COMMIT < :DATE_FROM)
      AND  ((C.FIRM_ID+0)     = :FIRM_ID)
      AND  ( (:FILIAL_ID IS NULL) OR ((C.FILIAL_ID+0) = :FILIAL_ID) )
      AND  ((C.ACC_ID_DEB+0)  = :ACC_ID)
      AND  (C.SUBKONTO_ID_DEB = :SUBKONTO_ID)
    INTO   :SALDOBEG_DEB, :QUANTBEG_DEB;
    SELECT COALESCE(SUM(C.CND_VALUE),0), COALESCE(SUM(C.SUBKONTO_QUANT_KRED),0)
    FROM   TABL$P_CND C
    WHERE  (C.DATE_COMMIT < :DATE_FROM)
      AND  ((C.FIRM_ID+0)      = :FIRM_ID)
      AND  ( (:FILIAL_ID IS NULL) OR ((C.FILIAL_ID+0) = :FILIAL_ID) )
      AND  ((C.ACC_ID_KRED+0)  = :ACC_ID)
      AND  (C.SUBKONTO_ID_KRED = :SUBKONTO_ID)
    INTO   :SALDOBEG_KRD, :QUANTBEG_KRD;
    SALDOBEG = :SALDOBEG_DEB - :SALDOBEG_KRD;
    QUANTBEG = :QUANTBEG_DEB - :QUANTBEG_KRD;
    SALDOBEG_DEB = 0; QUANTBEG_DEB = 0;
    SALDOBEG_KRD = 0; QUANTBEG_KRD = 0;
    IF(:SALDOBEG < 0)THEN SALDOBEG_KRD = (-1) * :SALDOBEG; ELSE SALDOBEG_DEB = :SALDOBEG;
    IF(:QUANTBEG < 0)THEN QUANTBEG_KRD = (-1) * :QUANTBEG; ELSE QUANTBEG_DEB = :QUANTBEG;
    SELECT COALESCE(SUM(C.CND_VALUE),0), COALESCE(SUM(C.SUBKONTO_QUANT_DEB),0)
    FROM   TABL$P_CND C
    WHERE  (C.DATE_COMMIT BETWEEN :DATE_FROM AND :DATE_TO)
      AND  ((C.FIRM_ID+0)     = :FIRM_ID)
      AND  ( (:FILIAL_ID IS NULL) OR ((C.FILIAL_ID+0) = :FILIAL_ID) )
      AND  ((C.ACC_ID_DEB+0)  = :ACC_ID)
      AND  (C.SUBKONTO_ID_DEB = :SUBKONTO_ID)
    INTO   :SALDO_DEBET, :QUANT_DEBET;
    SELECT COALESCE(SUM(C.CND_VALUE),0), COALESCE(SUM(C.SUBKONTO_QUANT_KRED),0)
    FROM   TABL$P_CND C
    WHERE  (C.DATE_COMMIT BETWEEN :DATE_FROM AND :DATE_TO)
      AND  ((C.FIRM_ID+0)      = :FIRM_ID)
      AND  ( (:FILIAL_ID IS NULL) OR ((C.FILIAL_ID+0) = :FILIAL_ID) )
      AND  ((C.ACC_ID_KRED+0)  = :ACC_ID)
      AND  (C.SUBKONTO_ID_KRED = :SUBKONTO_ID)
    INTO   :SALDO_KREDIT, :QUANT_KREDIT;
    SALDOEND = :SALDOBEG + :SALDO_DEBET - :SALDO_KREDIT;
    QUANTEND = :QUANTBEG + :QUANT_DEBET - :QUANT_KREDIT;
    SALDOEND_DEB = 0; QUANTEND_DEB = 0;
    SALDOEND_KRD = 0; QUANTEND_KRD = 0;
    IF(:SALDOEND < 0)THEN SALDOEND_KRD = (-1) * :SALDOEND; ELSE SALDOEND_DEB = :SALDOEND;
    IF(:QUANTEND < 0)THEN QUANTEND_KRD = (-1) * :QUANTEND; ELSE QUANTEND_DEB = :QUANTEND;
    IF( (:SALDOBEG_DEB<>0) OR (:SALDOBEG_KRD<>0) OR (:SALDO_DEBET<>0) OR (:SALDO_KREDIT<>0) OR (:SALDOEND_DEB<>0) OR (:SALDOEND_KRD<>0) )THEN
      SUSPEND;
    END
END
