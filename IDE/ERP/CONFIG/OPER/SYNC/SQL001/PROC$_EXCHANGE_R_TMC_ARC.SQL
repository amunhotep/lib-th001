CREATE OR ALTER PROCEDURE PROC$_EXCHANGE_R_TMC_ARC (
  Q_DATABASEPATH DOMN$PSTRING,
  Q_USERNAME     DOMN$PSTRING,
  Q_USERPWD      DOMN$PSTRING,
  Q_FILIAL_ID    TYPE OF COLUMN TABL$R_FILIALS.ID)
RETURNS (
  TYPE_ID TYPE OF COLUMN TABL$_TB_TYPES.ID,
  NAME    TYPE OF COLUMN TABL$_TB.NAME,
  CNT     DOMN$INTEGER)
AS
  DECLARE VARIABLE P_ID               TYPE OF COLUMN TABL$R_TMC.ID;
  DECLARE VARIABLE P_NEW_ID           TYPE OF COLUMN TABL$R_TMC.ID;
  DECLARE VARIABLE P_NAME             TYPE OF COLUMN TABL$R_TMC.NAME;
  DECLARE VARIABLE P_FLAG_DELETE      TYPE OF COLUMN TABL$R_TMC.FLAG_DELETE;
  DECLARE VARIABLE P_NAME2            TYPE OF COLUMN TABL$R_TMC.NAME2;
  DECLARE VARIABLE P_ARTICLE          TYPE OF COLUMN TABL$R_TMC.ARTICLE;
  DECLARE VARIABLE P_NUMSHOW          TYPE OF COLUMN TABL$R_TMC.NUMSHOW;
  DECLARE VARIABLE P_EDIZM_ID         TYPE OF COLUMN TABL$R_TMC.EDIZM_ID;
  DECLARE VARIABLE P_TMC_GROUP_ID     TYPE OF COLUMN TABL$R_TMC.TMC_GROUP_ID;
  DECLARE VARIABLE P_TMC_TYPE_ID      TYPE OF COLUMN TABL$R_TMC.TMC_TYPE_ID;
  DECLARE VARIABLE P_TMC_BRAND_ID     TYPE OF COLUMN TABL$R_TMC.TMC_BRAND_ID;
  DECLARE VARIABLE P_DEV_TMC_BRAND_ID TYPE OF COLUMN TABL$R_TMC.DEV_TMC_BRAND_ID;
  DECLARE VARIABLE P_COUNTRY_ID       TYPE OF COLUMN TABL$R_TMC.COUNTRY_ID;
  DECLARE VARIABLE P_PROBE            TYPE OF COLUMN TABL$R_TMC.PROBE;
  DECLARE VARIABLE P_MASSA            TYPE OF COLUMN TABL$R_TMC.MASSA;
  DECLARE VARIABLE P_MASSA_NETTO      TYPE OF COLUMN TABL$R_TMC.MASSA_NETTO;

  DECLARE VARIABLE PP_VALUE_DATE      TYPE OF COLUMN TABL$R_TMC_P.VALUE_DATE;
  DECLARE VARIABLE PP_PRICE           TYPE OF COLUMN TABL$R_TMC_P.PRICE;
  DECLARE VARIABLE PP_PRICE_IN        TYPE OF COLUMN TABL$R_TMC_P.PRICE_IN;
  DECLARE VARIABLE PP_PRICE_1         TYPE OF COLUMN TABL$R_TMC_P.PRICE_1;
  DECLARE VARIABLE PP_PRICE_2         TYPE OF COLUMN TABL$R_TMC_P.PRICE_2;
  DECLARE VARIABLE PP_PRICE_3         TYPE OF COLUMN TABL$R_TMC_P.PRICE_3;
  DECLARE VARIABLE PP_PRICE_4         TYPE OF COLUMN TABL$R_TMC_P.PRICE_4;
  DECLARE VARIABLE PP_PRICE_5         TYPE OF COLUMN TABL$R_TMC_P.PRICE_5;
  DECLARE VARIABLE PP_J_ID            TYPE OF COLUMN TABL$R_TMC_P.J_ID;
  DECLARE VARIABLE PP_J_ID_NEW        TYPE OF COLUMN TABL$R_TMC_P.J_ID;

  DECLARE VARIABLE P_SQL_STMT    DOMN$BLOB_SQL;
BEGIN
  TYPE_ID = 2;
  CNT     = 0;
  SELECT FIRST 1 TB.NAME FROM TABL$_TB TB WHERE(TRIM(UPPER(TB.ID)) = 'TABL$R_TMC') INTO :NAME;
  -- EXECUTE LOCAL !
  EXECUTE STATEMENT 'ALTER SEQUENCE GENR$R_TMC_ID RESTART WITH -999999;';

  P_SQL_STMT =
    'SELECT T.ID, T.NAME, T.NAME2, T.FLAG_DELETE, T.ARTICLE, T.NUMSHOW, T.EDIZM_ID, '||
    '       T.TMC_GROUP_ID, T.TMC_TYPE_ID, T.TMC_BRAND_ID, T.DEV_TMC_BRAND_ID, '||
    '       T.COUNTRY_ID, T.PROBE, T.MASSA, T.MASSA_NETTO '||
    'FROM   TABL$R_TMC T '||
    'WHERE  (T.ID > 0) '||
    'ORDER BY T.ID ';
  FOR
    EXECUTE STATEMENT :P_SQL_STMT
      ON EXTERNAL DATA SOURCE :Q_DATABASEPATH AS USER :Q_USERNAME PASSWORD :Q_USERPWD
      WITH AUTONOMOUS TRANSACTION
    INTO :P_ID, :P_NAME, :P_NAME2, :P_FLAG_DELETE, :P_ARTICLE, :P_NUMSHOW, :P_EDIZM_ID,
         :P_TMC_GROUP_ID, :P_TMC_TYPE_ID, :P_TMC_BRAND_ID, :P_DEV_TMC_BRAND_ID,
         :P_COUNTRY_ID, :P_PROBE, :P_MASSA, :P_MASSA_NETTO
  DO
    BEGIN
    UPDATE OR INSERT INTO TABL$R_TMC(ID, NAME, NAME2, FLAG_DELETE, ARTICLE, NUMSHOW, EDIZM_ID,
      TMC_GROUP_ID, TMC_TYPE_ID, TMC_BRAND_ID, DEV_TMC_BRAND_ID,
      COUNTRY_ID, PROBE, MASSA, MASSA_NETTO
    )VALUES (:P_ID, :P_NAME, :P_NAME2, :P_FLAG_DELETE, :P_ARTICLE, :P_NUMSHOW, :P_EDIZM_ID,
      :P_TMC_GROUP_ID, :P_TMC_TYPE_ID, :P_TMC_BRAND_ID, :P_DEV_TMC_BRAND_ID,
      :P_COUNTRY_ID, :P_PROBE, :P_MASSA, :P_MASSA_NETTO
    )MATCHING(ID)RETURNING ID INTO :P_NEW_ID;
    UPDATE TABL$R_TMC T SET T.ID = :P_ID WHERE (T.ID = :P_NEW_ID);
    CNT = :CNT + 1;
    END
  -- GET SEQUENCE VALUE
  P_ID = 0;
  P_SQL_STMT = 'SELECT FIRST 1 GEN_ID(GENR$R_TMC_ID, 0) FROM RDB$DATABASE ';
  EXECUTE STATEMENT :P_SQL_STMT
    ON EXTERNAL DATA SOURCE :Q_DATABASEPATH AS USER :Q_USERNAME PASSWORD :Q_USERPWD
    WITH AUTONOMOUS TRANSACTION
    INTO :P_ID;
  -- EXECUTE LOCAL !
  EXECUTE STATEMENT 'ALTER SEQUENCE GENR$R_TMC_ID RESTART WITH '||:P_ID||';';
  SUSPEND;

  CNT = 0;
  NAME = :NAME ||': œ≈–»Œƒ»◊≈— »≈ –≈ ¬»«»“€';
  P_SQL_STMT =
    'SELECT P.TMC_ID, P.VALUE_DATE,P.PRICE,P.PRICE_IN,P.PRICE_1,P.PRICE_2, '||
    '       P.PRICE_3,P.PRICE_4,P.PRICE_5,P.J_ID '||
    'FROM   TABL$R_TMC_P P '||
    'ORDER BY P.TMC_ID, P.VALUE_DATE ';
  FOR
    EXECUTE STATEMENT :P_SQL_STMT
      ON EXTERNAL DATA SOURCE :Q_DATABASEPATH AS USER :Q_USERNAME PASSWORD :Q_USERPWD
      WITH AUTONOMOUS TRANSACTION
    INTO :P_ID, :PP_VALUE_DATE,:PP_PRICE,:PP_PRICE_IN,:PP_PRICE_1,:PP_PRICE_2,
         :PP_PRICE_3,:PP_PRICE_4,:PP_PRICE_5,:PP_J_ID
  DO
    BEGIN
    IF(NOT(EXISTS(SELECT P.TMC_ID FROM TABL$R_TMC_P P WHERE(P.TMC_ID = :P_ID)AND(P.VALUE_DATE = :PP_VALUE_DATE))))THEN
      BEGIN
      INSERT INTO TABL$R_TMC_P (TMC_ID, VALUE_DATE, PRICE, PRICE_IN, PRICE_1,
        PRICE_2, PRICE_3, PRICE_4, PRICE_5, J_ID
      ) VALUES (:P_ID, :PP_VALUE_DATE, :PP_PRICE, :PP_PRICE_IN, :PP_PRICE_1,
        :PP_PRICE_2, :PP_PRICE_3, :PP_PRICE_4, :PP_PRICE_5, 0
      );
      CNT = :CNT + 1;
      END
    END
  SUSPEND;
END
