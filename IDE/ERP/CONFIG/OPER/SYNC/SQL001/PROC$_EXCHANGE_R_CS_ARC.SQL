CREATE OR ALTER PROCEDURE PROC$_EXCHANGE_R_CS_ARC (
  Q_DATABASEPATH TYPE OF COLUMN TABL$R_FILIALS.DATABASE_NAME,
  Q_USERNAME     TYPE OF COLUMN TABL$_USERS.ID,
  Q_USERPWD      TYPE OF COLUMN TABL$_USERS.PWD,
  Q_FILIAL_ID    TYPE OF COLUMN TABL$R_FILIALS.ID)
RETURNS (
  TYPE_ID TYPE OF COLUMN TABL$_TB_TYPES.ID,
  NAME    TYPE OF COLUMN TABL$_TB.NAME,
  CNT     TYPE OF COLUMN TABL$J_4.ID)
AS
  DECLARE VARIABLE P_CS_GROUP_ID TYPE OF COLUMN TABL$R_CS.CS_GROUP_ID;
  DECLARE VARIABLE P_ID          TYPE OF COLUMN TABL$R_CS.ID;
  DECLARE VARIABLE P_NEW_ID      TYPE OF COLUMN TABL$R_CS.ID;
  DECLARE VARIABLE P_NAME        TYPE OF COLUMN TABL$R_CS.NAME;
  DECLARE VARIABLE P_FLAG_DELETE TYPE OF COLUMN TABL$R_CS.FLAG_DELETE;
  DECLARE VARIABLE P_KIND_ID     TYPE OF COLUMN TABL$R_CS.KIND_ID;
  DECLARE VARIABLE P_NDS_PAYED   TYPE OF COLUMN TABL$R_CS.NDS_PAYED;
  DECLARE VARIABLE P_NDS_CODE    TYPE OF COLUMN TABL$R_CS.NDS_CODE;
  DECLARE VARIABLE P_INN         TYPE OF COLUMN TABL$R_CS.INN;
  DECLARE VARIABLE P_GUID        TYPE OF COLUMN TABL$R_CS.GUID;
  DECLARE VARIABLE P_COMENT      TYPE OF COLUMN TABL$R_CS.COMENT;
  DECLARE VARIABLE P_CODEFLAYER  TYPE OF COLUMN TABL$R_CS.CODEFLAYER;
  DECLARE VARIABLE P_CODECARD    TYPE OF COLUMN TABL$R_CS.CODECARD;
  DECLARE VARIABLE P_DATE_LAST   TYPE OF COLUMN TABL$R_CS.DATE_LAST;
  DECLARE VARIABLE P_VALUE_DATE  TYPE OF COLUMN TABL$R_CS.VALUE_DATE;

  DECLARE VARIABLE P_SQL_STMT    TYPE OF COLUMN TABL$J_4.DOCSTR;
BEGIN
  TYPE_ID = 2;
  CNT     = 0;
  SELECT FIRST 1 TB.NAME FROM TABL$_TB TB WHERE(TRIM(UPPER(TB.ID)) = 'TABL$R_CS') INTO :NAME;
  P_ID = 0;
  -- EXECUTE LOCAL !
  EXECUTE STATEMENT 'ALTER SEQUENCE GENR$R_CS_ID RESTART WITH -999999;';

  P_SQL_STMT =
    'SELECT C.CS_GROUP_ID, C.ID, C.NAME, C.FLAG_DELETE, C.KIND_ID, C.CODEFLAYER, C.CODECARD, '||
    '       C.NDS_PAYED, C.NDS_CODE, C.INN, C.GUID, C.COMENT, C.DATE_LAST, C.VALUE_DATE '||
    'FROM   TABL$R_CS C '||
    'WHERE  (C.ID > '''||:P_ID||''') '||
    '  AND  (C.ID NOT IN (0, 3) ) '||
    'ORDER BY C.ID ';
  FOR
    EXECUTE STATEMENT :P_SQL_STMT
      ON EXTERNAL DATA SOURCE :Q_DATABASEPATH AS USER :Q_USERNAME PASSWORD :Q_USERPWD
      WITH AUTONOMOUS TRANSACTION
    INTO :P_CS_GROUP_ID, :P_ID, :P_NAME, :P_FLAG_DELETE, :P_KIND_ID, :P_CODEFLAYER, :P_CODECARD,
         :P_NDS_PAYED, :P_NDS_CODE, :P_INN, :P_GUID, :P_COMENT, :P_DATE_LAST, :P_VALUE_DATE
  DO
    BEGIN
    UPDATE OR INSERT INTO TABL$R_CS (CS_GROUP_ID, ID, NAME, FLAG_DELETE, KIND_ID, NDS_PAYED,
      NDS_CODE, INN, GUID, COMENT, DATE_LAST, FILIAL_ID, CODEFLAYER, CODECARD
    )VALUES (:P_CS_GROUP_ID, :P_ID, :P_NAME, :P_FLAG_DELETE, :P_KIND_ID, :P_NDS_PAYED,
      :P_NDS_CODE, :P_INN, :P_GUID, :P_COMENT, :P_DATE_LAST, :Q_FILIAL_ID, :P_CODEFLAYER, :P_CODECARD
    )MATCHING(
      ID
    )RETURNING ID INTO :P_NEW_ID;

    UPDATE TABL$R_CS S SET S.ID = :P_ID WHERE (S.ID = :P_NEW_ID);
    CNT = :CNT + 1;
    END

  -- GET SEQUENCE VALUE
  P_ID = 0;
  P_SQL_STMT = 'SELECT FIRST 1 GEN_ID(GENR$R_CS_ID, 0) FROM RDB$DATABASE ';
  EXECUTE STATEMENT :P_SQL_STMT
    ON EXTERNAL DATA SOURCE :Q_DATABASEPATH AS USER :Q_USERNAME PASSWORD :Q_USERPWD
    WITH AUTONOMOUS TRANSACTION
    INTO :P_ID;
  -- EXECUTE LOCAL !
  EXECUTE STATEMENT 'ALTER SEQUENCE GENR$R_CS_ID RESTART WITH '||:P_ID||';';

  SUSPEND;
END
