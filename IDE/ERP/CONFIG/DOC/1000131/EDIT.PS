{$DEFINE PEAKTOP:IDE/ERP/CONFIG/DOC/1000014/EDIT.PS}
{$IFNDEF PEAKTOP:GLOBAL_VARIABLES.INC}        {$I PEAKTOP:GLOBAL_VARIABLES.INC}        {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOLUMNEH.INC}           {$I PEAKTOP:OBJ/TCOLUMNEH.INC}           {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOLUMNEH_KEYLST.INC}    {$I PEAKTOP:OBJ/TCOLUMNEH_KEYLST.INC}    {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TIMAGELIST.INC}          {$I PEAKTOP:OBJ/TIMAGELIST.INC}          {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TACTION.INC}             {$I PEAKTOP:OBJ/TACTION.INC}             {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/OBJECTNAMES.INC} {$I PEAKTOP:IDE/ERP/DBO/OBJECTNAMES.INC} {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}   {$I PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}   {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/DBGRID/EXPORT/EXCEL.INC}
  {$I PEAKTOP:IDE/ERP/DBO/DBGRID/EXPORT/EXCEL.INC}
{$ENDIF}  
  //============================================================================
  function DocForm_ExecSQLParams(const aTransactionParams:array of string; const aSQL:string; const aParamNames, aParamValues:array of string):Boolean;
  var
    i    :Integer;
    lkTr :TxFBTransaction;
    lkQr :TxFBQuery;
  begin
    Result := false;
    if not FBDataBase.Connected then exit;
    lkTr := TxFBTransaction.Create(nil);
    with lkTr do
      begin
      DefaultDataBase := FBDataBase;
      with Params do
        begin
        Clear;
        if(Length(aTransactionParams) > 0)then
          for i:=0 to Length(aTransactionParams)-1 do
            Add(aTransactionParams[i])
         else
          begin
          Add('isc_tpb_read_committed');
          Add('isc_tpb_write');
          Add('isc_tpb_rec_version');
          Add('isc_tpb_nowait');
          end;   
        end;
      end;
    lkQr := TxFBQuery.Create(lkTr);
    with lkQR do
      begin
      Transaction := lkTr;
      SQL.Text := aSQL;
      if(Length(aParamNames) > 0)then
        begin
        Prepare;
        for i:=0 to Length(aParamNames)-1 do
          ParamByName(aParamNames[i]).AsString := aParamValues[i]; 
        end;
      try
        ExecSQL;
      except
        if lkTr.InTransaction then
          lkTr.Rollback;
        lkTr.Free;
        exit;    
      end;  
      end;
    if lkTr.InTransaction then
      lkTr.Commit;
    lkTr.Free;    
    Result := true;
  end;
  //============================================================================
  function DocForm_ExecSQL(const aTransactionParams:array of string; const aSQL:string):Boolean;
  begin
    Result := DocForm_ExecSQLParams(aTransactionParams, aSQL, [], []);
  end;
  //============================================================================
const
  msg_invalid_resource       = 'Неверный файл ресурсов';  
  msg_lblid                  = 'Код'; 
  msg_lblnumber              = 'Номер'; 
  msg_lblnumberfull          = 'Полный №'; 
  msg_lblnumberin            = 'Входящий №'; 
  msg_lbldate                = 'Дата'; 
  msg_lblname                = 'Примечание к документу'; 
  msg_lblfirm                = 'Фирма'; 
  msg_lblfilial              = 'Филиал'; 
  msg_lbluser                = 'Пользователь'; 
  msg_lbluserwrk             = 'Сотрудник'; 
  msg_lblcs                  = 'Контрагент'; 
  msg_lblcsdoc               = 'Договор поставки'; 
  msg_lblcsaddress           = 'Адрес:'; 
  msg_lblplace               = 'Место хранения'; 
  msg_lblplaceto             = 'В место хранения'; 
  msg_lblwrk                 = 'Торговый представитель'; 
  msg_lbltaxmodel            = 'Налоговая модель'; 
  msg_lbldocpay              = 'Документ об оплате'; 
  msg_lbltmcgrid             = 'Сетка цен'; 
  msg_actrefresh             = 'Обновить'; 
  msg_actrefresh_hint        = 'Сохранить и обновить документ'; 
  msg_actprint               = 'Печать'; 
  msg_actprint_hint          = 'Печать документа'; 
  msg_actcommit              = 'Провести'; 
  msg_actcommit_hint         = 'Провести документ'; 
  msg_actuncommit            = 'Отменить'; 
  msg_actuncommit_hint       = 'Отменить проведение докумнта'; 
  msg_actexportxml           = 'Экспорт в XML'; 
  msg_actexportxml_hint      = 'Экспорт в XML'; 
  msg_actdocdelete           = 'Удалить'; 
  msg_actdocdelete_hint      = 'Удалить позицию из документа'; 
  msg_actpodbor              = 'Подбор'; 
  msg_actpodbor_hint         = 'Подбор ТМЦ по справочнику'; 
  msg_actpodborgroup         = 'Группа'; 
  msg_actpodborgroup_hint    = 'Вставить все ТМЦ из спраовчника определенной группы'; 
  msg_actpodborid            = 'По коду'; 
  msg_actpodborid_hint       = 'Подбор ТМЦ по коду'; 
  msg_actpodbornewtmc        = 'Создать'; 
  msg_actpodbornewtmc_hint   = 'Создать новую запись ТМЦ и добавить в документ'; 
  msg_actpodborbarcode       = 'По штрих-коду'; 
  msg_actpodborbarcode_hint  = 'Подбор ТМЦ по штрих-коду'; 
  msg_actpodborarticle       = 'По артикулу'; 
  msg_actpodborarticle_hint  = 'Подбор ТМЦ по артикулу'; 
  msg_acttmcedit             = 'Редактировать'; 
  msg_acttmcedit_hint        = 'Редактировать запись ТМЦ'; 
  msg_actdocnew              = 'Создать'; 
  msg_actdocnew_hint         = 'Создать подчиненный документ'; 
var 
  DocForm             :TAmunhotepForm; 
  TopBar              :TxcGradientPanelVista; 
  ImageLogo           :TImage; 
  ToolBar             :TxcGradientPanelVista; 
  PanelDoc            :TxcPanel; 
  PanelClient         :TxcGradientPanel; 
  PanelToolBarDoc     :TxcGradientPanelVista; 
  dbeID               :TDBEditEh; 
  dbeDOCNUMBER        :TDBEditEh; 
  dbeDOCNUMBERSTR     :TDBEditEh; 
  dbeDOCNUMBERIN      :TDBEditEh; 
  dbeNAME             :TDBEditEh; 
  dbdtpDATE_COMMIT    :TDBDateTimeEditEh; 
  dbdtpDATE_IN        :TDBDateTimeEditEh; 
  dbeFILIAL_ID_       :TDBEditEh; 
  dbeUSER_ID          :TDBEditEh; 
  dbeFIRM_ID_         :TDBEditEh; 
  dbeWRK_NAME         :TDBEditEh; 
  dbeCS_ID_           :TDBEditEh; 
  dbeCS_ADDR_ID_      :TDBEditEh; 
  dbeCS_DOC_ID_       :TDBEditEh; 
  dbePLACE_ID_        :TDBEditEh; 
  dbeTO_PLACE_ID_     :TDBEditEh; 
  dbeWRK_ID_          :TDBEditEh; 
  dbcbxTAX_ID         :TDBComboBoxEh; 
  dbeTMC_GRID_ID_     :TDBEditEh; 
  dbeJ_PAY_ID_        :TDBEditEh; 
  dbgDoc              :TDBGridEh; 
  trJournal           :TxFBTransaction; 
  dtsJournal          :TxFBDataSet; 
  dtsDoc              :TxFBDataSet; 
  DSdtsJournal        :TDataSource; 
  DSdtsDoc            :TDataSource; 
  evDoc               :TxFBEvents; 
var
  TMC_ID_SAVED :string;  
  //============================================================================
  procedure CloseDataSets;
  begin
    if(dtsJournal.State = dsEdit)then
      try
        dtsJournal.Post;
      except
        dtsJournal.Cancel;
      end;
    if trJournal.InTransaction then 
      trJournal.Commit; 
  end;
  //============================================================================
  procedure RefreshView;
  begin 
    CloseDataSets;
    dtsJournal.Prepare;
    dtsJournal.ParamByName('ID').AsString := DocForm.HelpKeyWord; 
    try 
      dtsJournal.Open;
    except 
//      Dialogs.MessageDlg(dtsJournal.SelectSQL.Text, mtError, [mbOk]);
    end; 
  end;
  //============================================================================
  procedure RefreshDetail;
  begin
    if dtsDoc.Active then 
      dtsDoc.Close;
    try 
      dtsDoc.Open; 
    except 
    end; 
  end;
  //============================================================================
  procedure dbeCS_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'CS_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('CS_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('DB:CONFIG/REF/CS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.CS_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeCS_ID_Edit_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    SetGlobalVariable('CS_ID', dtsJournal.FieldByName('CS_ID').AsString);
    call('DB:CONFIG/REF/CS/DEFAULT_ITEM.PS');
  end;
  //============================================================================
  procedure dbeCS_ADDR_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
    lkScript       :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'CS_ADDR_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('CS_ADDR_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    lkScript := 
      '{$IFNDEF PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}  {$I PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}{$ENDIF} '+SQLCRLF+
      'begin '+SQLCRLF+
      '  TERPFormGrid_DataSetFilter_Add(''CS_ID'', ''CS_ID = '''''+dtsJournal.FieldByName('CS_ID').AsString+''''' ''); '+SQLCRLF+ 
      '  Reference_Execute(''TABL$R_CS_ADDR''); '+SQLCRLF+
      'end. '+SQLCRLF;
    run(lkScript, 'DB:CONFIG/REF/CS_ADDR/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.CS_ADDR_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeCS_DOC_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
    lkScript       :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'CS_DOCS_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('CS_DOC_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    lkScript := 
      '{$IFNDEF PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}  {$I PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}{$ENDIF} '+SQLCRLF+
      'var '+SQLCRLF+
      '  lkForm :TForm; '+SQLCRLF+
      'begin '+SQLCRLF+                  
      '  TERPFormGrid_DataSetFilter_Add(''CS_ID''     , ''CS_ID = '''''+dtsJournal.FieldByName('CS_ID').AsString+''''' ''); '+SQLCRLF+ 
      '  TERPFormGrid_DataSetFilter_Add(''DOCTYPE_ID'', ''DOCTYPE_ID IN (1000033,1000034) ''); '+SQLCRLF+ 
      '  lkForm := TERPFormGridRef_Create(''TABL$R_CS_DOCS'', true); '+SQLCRLF+
      '  with lkForm do '+SQLCRLF+
      '    begin '+SQLCRLF+
      '    with TERPForm_DBGridMain(lkForm) do '+SQLCRLF+
      '      begin '+SQLCRLF+
      '      FieldColumns[''CS_ID_''     ].ColParams[ERP_COL_INDEX_VALUEDEFAULT] := '''+dtsJournal.FieldByName('CS_ID').AsString+'''; '+SQLCRLF+
      '      FieldColumns[''DOCTYPE_ID_''].ColParams[ERP_COL_INDEX_VALUEDEFAULT] := ''1000033''; '+SQLCRLF+
      '      end; '+SQLCRLF+
      '    if(ShowModal <> mrOk)then '+SQLCRLF+
      '      SetGlobalVariable(TERPForm_Settings(lkForm).Values[ERP_SETTINGS_BUFFERVAR], ''''); '+SQLCRLF+
      '    TForm_Position_Save(lkForm, PrepareAbsoleteFileName(''TMP:''+ERP_FILENAME_CFG_DIALOG_REF+''TABL$R_CS_DOCS.CFG'')); '+SQLCRLF+  
      '    Free; '+SQLCRLF+
      '    end; '+SQLCRLF+  
      'end. '+SQLCRLF;
    if not run(lkScript, 'DB:CONFIG/REF/CS_DOCS/DEFAULT_DLG.PS')then exit;
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.CS_DOC_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    WriteLn(lkSQL);
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeCS_DOC_ID_Max_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkBUFFER_ID := '0';
    if not GetField(dtsJournal.DataBase, 'TABL$R_CS_DOCS', 'MAX(ID)', '(CS_ID = '''+dtsJournal.FieldByName('CS_ID').AsString+''') AND (DOCTYPE_ID = 1000033)', lkBUFFER_ID) then exit;
    if(StrTrimAll(lkBUFFER_ID) = '')then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.CS_DOC_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    WriteLn(lkSQL);
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeCS_DOC_ID_Clear_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL          :string;
  begin
    Handled := true; 
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.CS_DOC_ID = 0 WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeCS_DOC_ID_Create_OnButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkID   :string;
    lkSQL  :string;
    lkScript:string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkID := dtsJournal.FieldByName('CS_DOC_ID').AsString;
    SetGlobalVariable('CS_DOCS_ID', lkID);
    lkSQL := 
      'EXECUTE BLOCK '+#13#10+
      'AS '+#13#10+
      '  DECLARE VARIABLE P_CS_DOC_ID TYPE OF COLUMN TABL$R_CS_DOCS.ID; '+#13#10+
      'BEGIN '+#13#10+
      '  INSERT INTO TABL$R_CS_DOCS(CS_ID, DOCTYPE_ID, NAME, RECEPIENT)VALUES('+dtsJournal.FieldByName('CS_ID').AsString+
      ',1000033, '''', '''')RETURNING ID INTO :P_CS_DOC_ID;'+#13#10+
      '  UPDATE TABL$J_1000014 J SET J.CS_DOC_ID = :P_CS_DOC_ID WHERE (J.J_ID = '''+dtsJournal.FieldByName('ID').AsString+'''); '+#13#10+
      'END';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
    lkID := dtsJournal.FieldByName('CS_DOC_ID').AsString;
    SetGlobalVariable('CS_DOCS_ID', lkID);
    call('DB:CONFIG/REF/CS_DOCS/DEFAULT_ITEM_DLG.PS');
    RefreshView;
  end; 
  //============================================================================
  procedure dbePLACE_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'PLACE_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('PLACE_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('DB:CONFIG/REF/PLACES/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.PLACE_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeTO_PLACE_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'PLACE_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('TO_PLACE_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('DB:CONFIG/REF/PLACES/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.TO_PLACE_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeTO_PLACE_ID_Clear_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL :string;
  begin
    Handled := true; 
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.TO_PLACE_ID = 0 WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeWRK_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'WRK_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('WRK_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('DB:CONFIG/REF/WRK/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.WRK_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    WriteLn(lkSQL);
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeWRK_ID_Clear_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL :string;
  begin
    Handled := true; 
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.WRK_ID = 0 WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeFILIAL_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'FILIAL_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('FILIAL_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('DB:CONFIG/REF/FILIALS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_4 TB SET TB.FILIAL_ID = '''+lkBUFFER_ID+''' WHERE(TB.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeUSER_ID_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'USER_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('USER_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('DB:CONFIG/REF/_USERS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_4 TB SET TB.USER_ID = '''+lkBUFFER_ID+''' WHERE(TB.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeDOCNUMBER_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkNumber :string;
    lkTr     :TxFBTransaction;
    lkQr     :TxFBQuery;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkNumber := '';
    lkTr := TxFBTransaction.Create(nil);
    with lkTr do
      begin
      DefaultDataBase := dtsJournal.DataBase;
      with Params do
        begin
        Clear;
        Add('isc_tpb_write');
        Add('isc_tpb_consistency');
        end;
      end;
    lkQr := TxFBQuery.Create(lkTr);
    with lkQr do
      begin
      Transaction := lkTr;
      SQL.Text := 'SELECT FIRST 1 P.NEW_NUMBER FROM PROC$J_GEN_4('+dtsJournal.FieldByName('TYPE_ID').AsString+', '+dtsJournal.FieldByName('FIRM_ID').AsString+') P ';
      try
        Open;
      except 
        if lkTr.InTransaction then lkTr.Rollback;
        lkTr.Free;
        exit;
      end;
      if Active then
        begin
        First;
        lkNumber := FieldByName('NEW_NUMBER').AsString;
        end;
      end;
    if lkTr.InTransaction then 
      lkTr.Commit;
    lkTr.Free;
    lkNumber := StrCiphersOnlyInt(lkNumber);
    if(StrTrimAll(lkNumber) = '')then exit;
    with dtsJournal do
      begin
      Edit;
      FieldByName('DOCNUMBER').AsString := lkNumber;
      try Post; except Cancel end;
      end;
  end;
  //============================================================================
  procedure dbeTMC_GRID_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'TMC_GRID_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('TMC_GRID_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('DB:CONFIG/REF/TMC_GRID/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.TMC_GRID_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeTMC_GRID_ID_Clear_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL :string;
  begin
    Handled := true; 
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.TMC_GRID_ID = 0 WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeJ_PAY_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkObjectId     :string;
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkScript       :string;
    lkSQL          :string;
  begin
    Handled := true;
    lkVariableName := 'J_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('J_PAY_ID').AsString;
    if(StrTrimAll(lkBUFFER_ID) = '')then lkBUFFER_ID := '0';
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    if(dtsJournal.FieldByName('TYPE_ID').AsString = '1000075')then
      begin
      lkScript := 
        '{$IFNDEF PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$I PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$ENDIF} '+SQLCRLF+
        'begin '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_DateInit := true; '+#13#10+
        '  TERPFormGrid_DataSetFilter_DateFrom := StrToDate('''+FormatDateTime('dd.mm.yyyy',StartOfTheMonth(dtsJournal.FieldByName('DATE_COMMIT').AsDateTime))+'''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_DateTo   := StrToDate('''+FormatDateTime('dd.mm.yyyy',EndOfTheMonth(dtsJournal.FieldByName('DATE_COMMIT').AsDateTime))+'''); '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_Add(''ID'', ''EXISTS(SELECT D0017.ID FROM TABL$D_1000017 D0017 WHERE (D0017.J_ID = R0000.ID) AND (D0017.J_REASON_ID = '''''+
                                                   dtsJournal.FieldByName('ID').AsString+''''')) ''); '+SQLCRLF+
        '  Journal_Execute(''1000017''); '+SQLCRLF+
        'end. '+SQLCRLF;
      end
    else if(dtsJournal.FieldByName('TYPE_ID').AsString = '1000028')then  
      begin
      lkScript := 
        '{$IFNDEF PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$I PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$ENDIF} '+SQLCRLF+
        'begin '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_DateInit := true; '+#13#10+
        '  TERPFormGrid_DataSetFilter_DateFrom := StrToDate('''+FormatDateTime('dd.mm.yyyy',StartOfTheMonth(dtsJournal.FieldByName('DATE_COMMIT').AsDateTime))+'''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_DateTo   := StrToDate('''+FormatDateTime('dd.mm.yyyy',EndOfTheMonth(dtsJournal.FieldByName('DATE_COMMIT').AsDateTime))+'''); '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_Add(''ID'', ''EXISTS(SELECT D0017.ID FROM TABL$D_1000017 D0017 WHERE (D0017.J_ID = R0000.ID) AND (D0017.J_REASON_ID = '''''+
                                                   dtsJournal.FieldByName('ID').AsString+''''')) '+
                                                   ' OR EXISTS(SELECT D0017.ID FROM TABL$D_1000017 D0017 WHERE (D0017.J_ID = R0000.ID) AND (D0017.J_REASON_ID = (SELECT FIRST 1 JT.ID FROM TABL$J_CHILDS JCT, TABL$J_4 JT WHERE (JCT.J_CHILD_ID = '''''+
                                                   dtsJournal.FieldByName('ID').AsString+''''')AND(JT.ID = JCT.J_ID)AND(JT.TYPE_ID = 1000075)))  ) ''); '+SQLCRLF+
        '  Journal_Execute(''1000017''); '+SQLCRLF+
        'end. '+SQLCRLF;
      end
    else  
      lkScript := 
        '{$IFNDEF PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$I PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$ENDIF} '+SQLCRLF+
        'begin '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_DateInit := true; '+#13#10+
        '  TERPFormGrid_DataSetFilter_DateFrom := StrToDate('''+FormatDateTime('dd.mm.yyyy',StartOfTheMonth(dtsJournal.FieldByName('DATE_COMMIT').AsDateTime))+'''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_DateTo   := StrToDate('''+FormatDateTime('dd.mm.yyyy',EndOfTheMonth(dtsJournal.FieldByName('DATE_COMMIT').AsDateTime))+'''); '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_Add(''FIRM_ID'', ''FIRM_ID = '''''+dtsJournal.FieldByName('FIRM_ID').AsString+''''' ''); '+SQLCRLF+
        '  Journal_Execute(''1000017''); '+SQLCRLF+
        'end. '+SQLCRLF;
    run(lkScript, 'DB:CONFIG/DOC/1000017/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.J_PAY_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeJ_PAY_ID_Clear_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL :string;
  begin
    Handled := true; 
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkSQL := 'UPDATE TABL$J_1000014 TB SET TB.J_PAY_ID = 0 WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dtsJournal_AfterOpen(DataSet :TDataSet);
  begin
    RefreshDetail;
  end;
  //============================================================================
  procedure dtsJournal_BeforeClose(DataSet :TDataSet);
  begin
    if dtsDoc.Active then
      begin
      if(dtsDoc.State = dsEdit)then
        try
          dtsDoc.Post;
        except
          dtsDoc.Cancel;
        end;
      dtsDoc.Close;  
      end;  
  end;
  //============================================================================
  procedure dtsJournal_AfterScroll(DataSet :TDataSet);
  var
    lkTypeId :Integer;
  begin
    lkTypeId := DataSet.FieldByName('TYPE_ID').AsInteger;
    DocForm.Caption := DataSet.FieldByName('TYPE_ID_').AsString+' '+DataSet.FieldByName('DOCNUMBERSTR').AsString;
    DocForm.SetCaption(DocForm.Caption);
    TopBar.Caption := #$20#$20#$20#$20#$20#$20+DocForm.Caption;
    PanelClient.Colors.Window := DataSet.FieldByName('COLOR_BGR').AsInteger;
    PanelClient.Font.Color    := DataSet.FieldByName('COLOR_FRG').AsInteger;
    dbgDoc.ReadOnly := (DataSet.FieldByName('FLAG_COMMIT').AsInteger = 1);
    PanelClient.Enabled := not dbgDoc.ReadOnly;
    if dbgDoc.ReadOnly then
      dbgDoc.Options := [dgRowSelect, dgAlwaysShowSelection,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs, dgMultiSelect, dgAlwaysShowSelection] 
     else
      dbgDoc.Options := [dgEditing,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs,dgConfirmDelete,dgCancelOnExit, dgMultiSelect, dgAlwaysShowSelection]; 
    if( (lkTypeId = 1000131) or (lkTypeId = 1000132) )then
      TCustomAction(DataSet.Owner.FindComponent('actDocNew')).Visible := true; 
  end;
  //============================================================================
  procedure dtsDoc_OnFieldChange(Sender: TField);
  begin
    if(Sender.DataSet.State <> dsInsert)then
      RefreshView;  
  end;
  //============================================================================
  procedure dtsDoc_AfterOpen(DataSet :TDataSet);
  var
    i:Integer;
  begin
    for i:=0 to DataSet.Fields.Count-1 do
      if((DataSet.Fields[i].FieldName = 'PRICE')or
         (DataSet.Fields[i].FieldName = 'QUANT'))then
        DataSet.Fields[i].OnChange := @dtsDoc_OnFieldChange;
    if(DataSet.Tag <> 0)then
      DataSet.RecNo := DataSet.Tag;
  end;
  //============================================================================
  procedure dtsDoc_BeforeClose(DataSet :TDataSet);
  begin
    DataSet.Tag := DataSet.RecNo;
  end;
  //============================================================================
  procedure dtsDoc_AfterScroll(DataSet :TDataSet);
  begin
  end;
  //============================================================================
  procedure actRefresh_OnExecute(Sender :TObject);
  begin
    RefreshView;
  end;
  //============================================================================
  procedure actPrint_OnExecute(Sender :TObject);
  var
    lkScName:string;
  begin
    if not dtsJournal.Active then exit;
    if(not(dtsJournal.RecordCount>0))then exit;
    lkScName := 'DB:CONFIG/DOC/'+dtsJournal.FieldByName('TYPE_ID').AsString+'/PRINT.PS';
    SetGlobalVariable('J_ID', dtsJournal.FieldByName('ID').AsString);
    if not call(lkScName)then
      Dialogs.MessageDlg('Ошибка в вызове скрипта '+#13#10+lkScName, mtError, [mbOk]);
  end;
  //============================================================================
  procedure actDocExportXML_OnExecute(Sender :TObject);
  var
    lkScName:string;
  begin
    if not dtsJournal.Active then exit;
    if(not(dtsJournal.RecordCount>0))then exit;
    lkScName := PrepareAbsoleteFileName('PEAKTOP:IDE/ERP/CONFIG/DOC/1000131/EXPORTXML.PS');
    SetGlobalVariable('J_ID', dtsJournal.FieldByName('ID').AsString);
    if not call(lkScName)then
      Dialogs.MessageDlg('Ошибка в вызове скрипта '+#13#10+lkScName, mtError, [mbOk]);
  end;
  //============================================================================
  procedure actPrint_OnUpdate(Sender :TObject);
  var
    lkEnabled :Boolean;
  begin
    lkEnabled := dtsJournal.Active;
    if(lkEnabled)then lkEnabled := (dtsJournal.RecordCount > 0);
    TCustomAction(Sender).Enabled := lkEnabled;
  end;
  //============================================================================
  procedure actCommit_OnExecute(Sender :TObject);
  var
    lkSQL :string;
  begin
    if not(Dialogs.MessageDlg('Провести документ ?', mtConfirmation, [mbYes, mbNo])=mrYes)then exit;
    lkSQL := 'UPDATE TABL$J_4 J SET J.FLAG_COMMIT = 1 WHERE (J.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actCommit_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actUnCommit_OnExecute(Sender :TObject);
  var
    lkSQL :string;
  begin
    if not(Dialogs.MessageDlg('Отменить проведение документа ?', mtConfirmation, [mbYes, mbNo])=mrYes)then exit;
    lkSQL := 'UPDATE TABL$J_4 J SET J.FLAG_COMMIT = 0 WHERE (J.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actUnCommit_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger <> 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actPodbor_OnExecute(Sender :TObject);
  var
    lkTMC_ID :string;
    lkSQL    :string;
  begin
    if(StrTrimAll(TMC_ID_SAVED) <> '')then
      SetGlobalVariable('TMC_ID', TMC_ID_SAVED);
    call('DB:CONFIG/REF/TMC/DEFAULT_DLG.PS');
    lkTMC_ID := GetGlobalVariable('TMC_ID');
    if( (StrTrimAll(lkTMC_ID)='') or (UpperCase(lkTMC_ID)='NULL'))then exit;
    lkSQL := 'INSERT INTO TABL$D_1000014(J_ID, TMC_ID, QUANT)VALUES('''+dtsJournal.FieldByName('ID').AsString+''', '''+lkTMC_ID+''', 1.000)';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
    if(dtsDoc.Active)then dtsDoc.Last;
    TMC_ID_SAVED := lkTMC_ID;
  end;
  //============================================================================
  procedure actPodborGroup_OnExecute(Sender :TObject);
  var
    lkTMC_GROUP_ID :string;
    lkSQL          :string;
  begin
    lkTMC_GROUP_ID := '0';
    SetGlobalVariable('TMC_GROUP_ID', lkTMC_GROUP_ID);
    call('DB:CONFIG/REF/TMC_GROUP/DEFAULT_DLG.PS');
    lkTMC_GROUP_ID := GetGlobalVariable('TMC_GROUP_ID');
    if((UpperCase(lkTMC_GROUP_ID)='NULL')  or (lkTMC_GROUP_ID = '0'))then exit;
    lkSQL := 
      'EXECUTE BLOCK AS '+#13#10+
      '  DECLARE VARIABLE P_TMC_ID DOMN$INTEGER; '+#13#10+
      'BEGIN '+#13#10+
      '  FOR SELECT T.ID FROM TABL$R_TMC T WHERE (T.TMC_GROUP_ID = '''+lkTMC_GROUP_ID+''') INTO :P_TMC_ID DO '+#13#10+
      '    INSERT INTO TABL$D_1000014(J_ID, TMC_ID, QUANT)VALUES('''+dtsJournal.FieldByName('ID').AsString+''', :P_TMC_ID, 0.000);'+#13#10+
      'END';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actDocDelete_OnExecute(Sender :TObject);
  var
    lkSQL :string;
    i     :Integer;
  begin    
    if not dtsDoc.Active then exit;  
    if not(dtsDoc.RecordCount>0)then exit;  
    if(Dialogs.MessageDlg('Удалить позицию из документа ?', mtConfirmation, [mbYes, mbNo]) <> mrYes)then exit;
    if(dbgDoc.SelectedRows.Count > 0)then
      begin
      dbgDoc.DataSource.DataSet.DisableControls;
      dbgDoc.SaveBookMark; 
      lkSQL := 'DELETE FROM TABL$D_1000014 D WHERE (D.ID IN ('+dbgDoc.DataSource.DataSet.FieldByName('ID').AsString;
      for i:=0 to dbgDoc.SelectedRows.Count-1 do
        begin
        dbgDoc.DataSource.DataSet.Bookmark := dbgDoc.SelectedRows[i];
        lkSQL := lkSQL + ', '+dbgDoc.DataSource.DataSet.FieldByName('ID').AsString;
        end;
      lkSQL := lkSQL + ') ); ';
      dbgDoc.RestoreBookMark; 
      dbgDoc.DataSource.DataSet.EnableControls;
      end
     else 
      lkSQL := 'DELETE FROM TABL$D_1000014 D WHERE (D.ID = '''+dtsDoc.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure actPodborId_OnExecute(Sender :TObject);
  var
    lkTMC_ID   :Integer;
    lkSQL, lkS :string;
  begin        
    lkTMC_ID := 0;
    if(not(Dialogs.InputQueryInteger('Подбор ТМЦ по коду', 'Введите код ТМЦ', lkTMC_ID)))then exit;
    GetField(dtsJournal.DataBase, 'TABL$R_TMC', 'COALESCE(COUNT(ID),0)', 'ID = '''+IntToStr(lkTMC_ID)+''' ', lkS);
    if(lkS = '0')then 
      begin
      Dialogs.MessageDlg('ТМЦ c кодом "'+IntToStr(lkTMC_ID)+'" не найдено!', mtInformation, [mbOK]);
      exit;
      end;
    lkSQL := 'INSERT INTO TABL$D_1000014(J_ID, TMC_ID, QUANT)VALUES('''+dtsJournal.FieldByName('ID').AsString+''', '''+IntToStr(lkTMC_ID)+''', 1.000)';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actPodborNewTMC_OnExecute(Sender :TObject);
  var
    lkTMC_GROUP_ID :string;
    lkTMC_GROUP    :string;
    lkSQL :string;
  begin
    lkTMC_GROUP_ID := '0';
    SetGlobalVariable('TMC_GROUP_ID', lkTMC_GROUP_ID);
    call('DB:CONFIG/REF/TMC_GROUP/DEFAULT_DLG.PS');
    lkTMC_GROUP_ID := GetGlobalVariable('TMC_GROUP_ID');
    if( (UpperCase(lkTMC_GROUP_ID) = 'NULL') or (lkTMC_GROUP_ID = '0'))then exit;
    GetField(dtsJournal.DataBase, 'TABL$R_TMC_GROUP', 'NAME', 'ID = '''+lkTMC_GROUP_ID+''' ', lkTMC_GROUP);
    lkSQL := 
      'EXECUTE BLOCK RETURNS ( '+#13#10+
      '  TMC_ID TYPE OF COLUMN TABL$R_TMC.ID '+#13#10+
      ')AS '+#13#10+
      'BEGIN '+#13#10+
      '  INSERT INTO TABL$R_TMC (NAME, NAME2, FLAG_DELETE, FLAG_LOCKED, ARTICLE, '+#13#10+
      '    NUMSHOW, EDIZM_ID, TMC_GROUP_ID, TMC_TYPE_ID, TMC_LIST_ID, TMC_BRAND_ID, '+#13#10+
      '    DEV_TMC_BRAND_ID, COUNTRY_ID, PROBE, LGTH, DIAM, MASSA, MASSA_NETTO, LIMIT, DEV_COUNTRY_ID '+#13#10+
      '  )VALUES ('''+StrReplaceStr(lkTMC_GROUP, '''','"')+''', '''+StrReplaceStr(lkTMC_GROUP, '''','"')+''', 0, 0, '''', '''', 1000000, '''+
      lkTMC_GROUP_ID+''', 2, 0, 0, 0, 0, '''', 0, 0, 0, 0, 0, 0 '+#13#10+
      '  )RETURNING ID INTO :TMC_ID; '+#13#10+
      '  INSERT INTO TABL$D_1000014(J_ID, TMC_ID, QUANT)VALUES('''+dtsJournal.FieldByName('ID').AsString+''', :TMC_ID, 1.000); '+#13#10+
      '  SUSPEND; '+#13#10+
      'END';  
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actPodborBarcode_OnExecute(Sender :TObject);
  var
    lkItemNumber :string;
    lkSQL, lkS, lkS2 :string;
    lkJ_ID :string;
  begin
    lkJ_ID := dtsJournal.FieldByName('ID').AsString;
    lkItemNumber := '';
    if not Dialogs.InputQueryString('Подбор по штрих-коду', 'Введите штрих код Т.М.Ц.', lkItemNumber) then exit;
    lkItemNumber := StrCiphersOnlyInt(lkItemNumber);
    // kill checksum
    if(Length(lkItemNumber) > 0)then
      Delete(lkItemNumber, Length(lkItemNumber), 1);
    // kill leading zeros
    if(Length(lkItemNumber) > 0)then
      while((Length(lkItemNumber) > 0) and (lkItemNumber[1] = '0'))do
        Delete(lkItemNumber, 1, 1);
    if(Length(lkItemNumber) <> 7)then
      begin
      Dialogs.MessageDlg('Неверный штрих-код ТМЦ !', mtWarning, [mbOk]);
      exit;
      end;
    GetField(dtsJournal.DataBase, 'TABL$R_TMC', 'COALESCE(COUNT(ID),0)', 'ID = '''+lkItemNumber+''' ', lkS);
    if(lkS = '0')then
      begin
      Dialogs.MessageDlg('ТМЦ с штрих-кодом "'+lkItemNumber+'" не существует в базе данных !', mtError, [mbOk]);
      exit;
      end;
    lkS := lkItemNumber;
    lkSQL := 'INSERT INTO TABL$D_1000014(J_ID, TMC_ID, QUANT)VALUES('''+dtsJournal.FieldByName('ID').AsString+''', '''+lkS+''', 1.000)';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actPodborArticle_OnExecute(Sender :TObject);
  var
    lkItemNumber :string;
    lkSQL, lkS, lkS2 :string;
    lkJ_ID :string;
  begin
    lkJ_ID := dtsJournal.FieldByName('ID').AsString;
    lkItemNumber := '';
    if not Dialogs.InputQueryString('Подбор по артиклу', 'Введите артикл Т.М.Ц.', lkItemNumber) then exit;
    GetField(dtsJournal.DataBase, 'PROC$__STR_ABC_ONLY('''+lkItemNumber+''')', 'COALESCE(STR,'''')', '', lkItemNumber);
    WriteLn(lkItemNumber);

    GetField(dtsJournal.DataBase, 'TABL$R_TMC', 'COALESCE(COUNT(ID),0)', 'TRIM(MORIONCODE) = '''+lkItemNumber+''' ', lkS);
    if(lkS = '0')then
      begin
      Dialogs.MessageDlg('ТМЦ с артикулом "'+lkItemNumber+'" не найден в базе данных !', mtError, [mbOk]);
      exit;
      end;
    GetField(dtsJournal.DataBase, 'TABL$R_TMC', 'MIN(ID)', 'TRIM(MORIONCODE) = '''+lkItemNumber+''' ', lkS);
    lkSQL := 'INSERT INTO TABL$D_1000014(J_ID, TMC_ID, QUANT)VALUES('''+dtsJournal.FieldByName('ID').AsString+''', '''+lkS+''', 1.000)';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actTMCEdit_OnExecute(Sender :TObject);
  begin
    if not dtsDoc.Active then exit;
    if not(dtsDoc.RecordCount>0)then exit;
    SetGlobalVariable('TMC_ID', dtsDoc.FieldByName('TMC_ID').AsString);
    call('DB:CONFIG/REF/TMC/DEFAULT_ITEM.PS');
  end;
  //============================================================================
  procedure actDocNew_OnExecute(Sender :TObject);
  var
    lkTypeId, lkIndx :Integer;
    lkJ_ID   :string;
  begin
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit;
    lkTypeId := dtsJournal.FieldByName('TYPE_ID').AsInteger;
    case lkTypeId of
      1000131:
        begin
        lkIndx := 0;
        if not Dialogs.CaseItem('Создать подчиненный документ', 'Корректировка выданной налоговой накладной', lkIndx) then exit;
        case lkIndx of
          0:if GetFieldCommit(dtsJournal.DataBase, 'PROC$J_INS_1000134_1000014('+dtsJournal.FieldByName('ID').AsString+')', 'J_ID', '', lkJ_ID)then
              begin
              SetGlobalVariable('J_ID', lkJ_ID);
              call(StrAbsolutePath('../1000134/EDIT.PS',ScriptName));
              end;
          end;    
        end;  
      1000132:
        begin
        lkIndx := 0;
        if not Dialogs.CaseItem('Создать подчиненный документ', 'Корректировка полученной налоговой накладной', lkIndx) then exit;
        case lkIndx of
          0:if GetFieldCommit(dtsJournal.DataBase, 'PROC$J_INS_1000133_1000014('+dtsJournal.FieldByName('ID').AsString+')', 'J_ID', '', lkJ_ID)then
              begin
              SetGlobalVariable('J_ID', lkJ_ID);
              call(StrAbsolutePath('../1000133/EDIT.PS',ScriptName));
              end;
          end;    
        end;  
      end;
  end;
  //============================================================================
  procedure actDocExportGridXLS_OnExecute(Sender :TObject);
  var
    lkCaption :string;
  begin
    lkCaption := '';
    if dtsJournal.Active then
      begin
      lkCaption := dtsJournal.FieldByName('TYPE_ID_').AsString+' '+dtsJournal.FieldByName('DOCNUMBERSTR').AsString;;
      end;
    ERP_DBGridEh_ExportToExcel(dbgDoc, 'Document', '', '', lkCaption, '');
  end;
  //============================================================================
  procedure actDocReload_OnExecute(Sender :TObject);
  begin
    if not dtsJournal.Active then exit;
    SetGlobalVariable('J_ID', dtsJournal.FieldByName('ID').AsString);
    CloseDataSets;
    call(StrAbsolutePath('../1000014/OPER_RELOAD.PS', ScriptName));
    RefreshView;  
  end;
  //============================================================================
  procedure dbcbxTAX_ID_OnCloseUp(Sender :TObject; Accept :Boolean);
  begin
    Accept := true;
    if(dbcbxTAX_ID.DataSource.DataSet.State = dsEdit)then
      dbcbxTAX_ID.DataSource.DataSet.Post;
    RefreshView;  
  end;
  //============================================================================
  procedure dbgDoc_OnGetCellParams(Sender: TObject; Column: TColumnEh; 
              AFont: TFont; var Background: TColor; State: TGridDrawState);
  begin
   if(Column.Tag=666)then exit;
   if(not(Column.Field.DataSet.Active))then exit;
   if(not(Column.Field.DataSet.RecordCount > 0))then exit;
   //if    (Column.Field.DataSet.FieldByName('FLAG_COMMIT').AsInteger=0)then aFont.Style:= aFont.Style + [fsBold     ];
   //Background := Column.Field.DataSet.FieldByName('COLOR_BGR').AsInteger;
   //aFont.Color:= Column.Field.DataSet.FieldByName('COLOR_FRG').AsInteger;
   if(Background=clWhite)then Background := Amunhotep_MainForm_StyleManager.Colors.Window;
   if(aFont.Color=Background)then aFont.Color := Amunhotep_MainForm_StyleManager.Colors.Border;
  end;
  //============================================================================
  procedure dbgDoc_TMC_NAME_Delete_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL :string;
  begin
    Handled := true;
    if not dtsDoc.Active then exit;  
    if not(dtsDoc.RecordCount>0)then exit;  
    lkSQL := 'DELETE FROM TABL$D_1000014 D WHERE (D.ID = '''+dtsDoc.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end; 
  //============================================================================
  procedure evDoc_OnEventAlert(Sender :TObject; EventName: string; EventCount: LongInt; var CancelAlerts: Boolean);
  begin
    RefreshView; 
    CancelAlerts := false;
  end;
  //============================================================================
  procedure DocForm_OnClose(Sender :TObject; var Action :TCloseAction);
  begin
    if evDoc.Registered then 
      evDoc.UnRegisterEvents;
    CloseDataSets; 
    if trJournal.InTransaction then 
      trJournal.Commit; 
    Action := caFree;
  end; 
  //============================================================================
  function DocForm_Create:TAmunhotepForm;
  var
    lkJ_ID     :string;
    lkTYPE_ID  :string;
    lkFileName :string;
    lkResBody  :string;
    lkStrm     :TMemoryStream;
    lkImgLogo  :TImage;
    lkLbl      :TLabel;
    lkAct      :TAction;
    lkTS       :TTabSheet;
    lkPM       :TPopupMenu;
    lkMM       :TMainMenu;
    lkCol      :TColumnEh;
    i          :Integer;
  begin
    lkJ_ID := GetGlobalVariable('J_ID');
    lkTYPE_ID := '0';
    GetField(FBDataBase, 'TABL$J_4', 'TYPE_ID', 'ID = '+lkJ_ID, lkTYPE_ID);
    with Amunhotep.MainForm do
      for i:=0 to MDIChildCount-1 do
        if(MDIChildren[i].HelpKeyWord = lkJ_ID)then
          begin
          MDIChildren[i].BringToFront;
          exit;
          end;
    DontAutoFree;
    lkFileName := StrAbsolutePath('./EDIT.XFM', ScriptName);
    lkResBody  := StringsLoadFromFile(lkFileName);
    if(lkResBody = '')then 
      begin
      Dialogs.MessageDlg(msg_invalid_resource+SQLCRLF+lkFileName, mtWarning, [mbOK]);
      exit;
      end;
    Result             := TAmunhotepForm(StrToComponent(lkResBody));
    Result.HelpKeyWord := lkJ_ID;
    Result.OnClose     := @DocForm_OnClose;
    try
      lkStrm := TMemoryStream.Create;
      if StreamLoadFromFile(PrepareAbsoleteFileName(ERP_ObjectIcon(ERP_OBJECTTYPE_DOC)),lkStrm)then
        Result.Icon.LoadFromStream(lkStrm);
    finally
     lkStrm.Free;
    end;
    TopBar := TxcGradientPanelVista(Result.FindComponent('TopBar')); 
    with TopBar do 
      begin 
      Caption    := #$20#$20#$20#$20#$20#$20; 
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Window; 
      Font.Name  := 'Verdana'; 
      Font.Size  := 14; 
      Font.Style := [fsBold]; 
      StyleManager          := nil;
      Colors.HotTrack       := ERP_ObjectColorLight(ERP_OBJECTTYPE_DOC);
      Colors.HotTrackBorder := ERP_ObjectColor(ERP_OBJECTTYPE_DOC);
      end; 
    lkImgLogo := TImage(Result.FindComponent('ImgLogo')); 
    try 
      lkStrm  := TMemoryStream.Create; 
      if StreamLoadFromFile(PrepareAbsoleteFileName(ERP_ObjectBitmap(ERP_OBJECTTYPE_DOC)), lkStrm)then 
        lkImgLogo.Picture.Bitmap.LoadFromStream(lkStrm); 
    finally 
      lkStrm.Free; 
    end; 
    ToolBar         := TxcGradientPanelVista(Result.FindComponent('ToolBar'));
    PanelDoc       := TxcPanel(Result.FindComponent('PanelDoc'));
    PanelClient     := TxcGradientPanel(Result.FindComponent('PanelClient'));
    PanelToolBarDoc := TxcGradientPanelVista(Result.FindComponent('PanelToolBarDoc'));

    lkLbl := TLabel(Result.FindComponent('lblDate'      )); lkLbl.Caption := msg_lbldate ;
    lkLbl := TLabel(Result.FindComponent('lblNAME'      )); lkLbl.Caption := msg_lblname ;
    lkLbl := TLabel(Result.FindComponent('lblCS'        )); lkLbl.Caption := msg_lblcs ;
    lkLbl := TLabel(Result.FindComponent('lblPlace'     )); lkLbl.Caption := msg_lblplace ;
    lkLbl := TLabel(Result.FindComponent('lblWrk'       )); lkLbl.Caption := msg_lblwrk ;
    lkLbl := TLabel(Result.FindComponent('lblFilial'    )); lkLbl.Caption := msg_lblfilial ;
    lkLbl := TLabel(Result.FindComponent('lblUser'      )); lkLbl.Caption := msg_lbluser ;
    lkLbl := TLabel(Result.FindComponent('lblID'        )); lkLbl.Caption := msg_lblid ;
    lkLbl := TLabel(Result.FindComponent('lblNumber'    )); lkLbl.Caption := msg_lblnumber ;
    lkLbl := TLabel(Result.FindComponent('lblNumberFull')); lkLbl.Caption := msg_lblnumberfull ;
    lkLbl := TLabel(Result.FindComponent('lblNumberIn'  )); lkLbl.Caption := msg_lblnumberin ;
    lkLbl := TLabel(Result.FindComponent('lblFirm'      )); lkLbl.Caption := msg_lblfirm ;
    lkLbl := TLabel(Result.FindComponent('lblUserWrk'   )); lkLbl.Caption := msg_lbluserwrk ;
    lkLbl := TLabel(Result.FindComponent('lblTaxModel'  )); lkLbl.Caption := msg_lbltaxmodel ;
    lkLbl := TLabel(Result.FindComponent('lblDocPay'    )); lkLbl.Caption := msg_lbldocpay ;
    lkLbl := TLabel(Result.FindComponent('lblPlaceTo'   )); lkLbl.Caption := msg_lblplaceto ;
    lkLbl := TLabel(Result.FindComponent('lblTmcGrid'   )); lkLbl.Caption := msg_lbltmcgrid ;
    lkLbl := TLabel(Result.FindComponent('lblCsDoc'     )); lkLbl.Caption := msg_lblcsdoc ;
    lkLbl := TLabel(Result.FindComponent('lblCsAddress' )); lkLbl.Caption := msg_lblcsaddress ;

    dbeNAME := TDBEditEh(Result.FindComponent('dbeNAME'));
    with dbeNAME do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      end; 
    dbdtpDATE_COMMIT := TDBDateTimeEditEh(Result.FindComponent('dbdtpDATE_COMMIT'));
    with dbdtpDATE_COMMIT do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      end; 
    dbeID := TDBEditEh(Result.FindComponent('dbeID'));
    with dbeID do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 
    dbeDOCNUMBER := TDBEditEh(Result.FindComponent('dbeDOCNUMBER'));
    with dbeDOCNUMBER do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN007.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        Hint    := 'Генерировать номер документа';
        OnClick := @dbeDOCNUMBER_OnEditButtonClick;
        end;
      end; 
    dbeDOCNUMBERSTR := TDBEditEh(Result.FindComponent('dbeDOCNUMBERSTR'));
    with dbeDOCNUMBERSTR do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 
    dbdtpDATE_IN := TDBDateTimeEditEh(Result.FindComponent('dbdtpDATE_IN'));
    with dbdtpDATE_IN do 
      begin 
      Color      := $FFFFE0;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      end; 
    dbeDOCNUMBERIN := TDBEditEh(Result.FindComponent('dbeDOCNUMBERIN'));
    with dbeDOCNUMBERIN do 
      begin 
      Color      := $FFFFE0;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      end; 
    dbeFIRM_ID_ := TDBEditEh(Result.FindComponent('dbeFIRM_ID_'));
    with dbeFIRM_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 
    dbeFILIAL_ID_  := TDBEditEh(Result.FindComponent('dbeFILIAL_ID_'));
    with dbeFILIAL_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeFILIAL_ID__OnEditButtonClick;
        end;
      end; 
    dbeUSER_ID := TDBEditEh(Result.FindComponent('dbeUSER_ID'));
    with dbeUSER_ID do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeUSER_ID_OnEditButtonClick;
        end;
      end; 
    dbeWRK_NAME  := TDBEditEh(Result.FindComponent('dbeWRK_NAME'));
    with dbeWRK_NAME do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 

    dbeCS_ID_ := TDBEditEh(Result.FindComponent('dbeCS_ID_'));
    with dbeCS_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN005.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_ID_Edit_OnEditButtonClick;
        end;
      end; 
    dbeCS_ADDR_ID_ := TDBEditEh(Result.FindComponent('dbeCS_ADDR_ID_'));
    with dbeCS_ADDR_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_ADDR_ID__OnEditButtonClick;
        end;
      end; 
    dbeCS_DOC_ID_ := TDBEditEh(Result.FindComponent('dbeCS_DOC_ID_'));
    with dbeCS_DOC_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN001.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_DOC_ID_Max_OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_DOC_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN004.BMP'));
        Style   := ebsGlyphEh;
        Hint    := 'Создать';
        Visible := true;
        OnClick := @dbeCS_DOC_ID_Create_OnButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_DOC_ID_Clear_OnEditButtonClick;
        end;
      end; 
    dbePLACE_ID_  := TDBEditEh(Result.FindComponent('dbePLACE_ID_'));
    with dbePLACE_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbePLACE_ID__OnEditButtonClick;
        end;
      end; 
    dbeTO_PLACE_ID_  := TDBEditEh(Result.FindComponent('dbeTO_PLACE_ID_'));
    with dbeTO_PLACE_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeTO_PLACE_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeTO_PLACE_ID_Clear_OnEditButtonClick;
        end;
      end; 
    dbeWRK_ID_ := TDBEditEh(Result.FindComponent('dbeWRK_ID_'));
    with dbeWRK_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeWRK_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeWRK_ID_Clear_OnEditButtonClick;
        end;
      end; 
    dbeTMC_GRID_ID_ := TDBEditEh(Result.FindComponent('dbeTMC_GRID_ID_'));
    with dbeTMC_GRID_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeTMC_GRID_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN001.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeTMC_GRID_ID_Clear_OnEditButtonClick;
        end;
      end; 
    dbcbxTAX_ID  := TDBComboBoxEh(Result.FindComponent('dbcbxTAX_ID'));
    with dbcbxTAX_ID do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      TColumnEh_FillKeyList('TABL$R_TAXES','ID','NAME','(PARENT_ID = 1000007)', KeyItems, Items);
      OnCloseUp  := @dbcbxTAX_ID_OnCloseUp;
      end; 
    dbeJ_PAY_ID_  := TDBEditEh(Result.FindComponent('dbeJ_PAY_ID_'));
    with dbeJ_PAY_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeJ_PAY_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeJ_PAY_ID_Clear_OnEditButtonClick;
        end;
      end; 
    dbgDoc := TDBGridEh(Result.FindComponent('dbgDoc'));
    with dbgDoc do 
      begin 
      Color             := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color        := Amunhotep.MainForm.StyleManager.Colors.Border;
      FixedColor        := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      TitleFont.Color   := Amunhotep.MainForm.StyleManager.Colors.Border;
      TitleFont.Style   := [fsBold];
      FooterFont.Color  := Amunhotep.MainForm.StyleManager.Colors.Border;
      FooterFont.Style  := [fsBold];
      OptionsEh         := OptionsEh + [dghFixed3D,dghFooter3D,dghHighlightFocus,dghEnterAsTab, dghDialogFind,dghColumnResize,dghColumnMove,dghExtendVertLines];
//      OptionsEh         := OptionsEh + [dghFixed3D,dghFooter3D,dghHighlightFocus,dghDialogFind,dghColumnResize,dghColumnMove,dghExtendVertLines];
      IndicatorOptions  := [gioShowRowIndicatorEh, gioShowRowselCheckboxesEh];  
      UseMultiTitle     := true;
      DrawMemoText      := true; 
      FrozenCols        := 0; 
      FooterRowCount    := 1; 
      VTitleMargin      := 4;
//      RowLines          := 2;
//      RowPanel.Active   := true;
      SumList.Active    := true; 
      OnGetCellParams   := @dbgDoc_OnGetCellParams;
      AllowedOperations := [alopUpdateEh, alopDeleteEh];
      Columns.Clear;
      lkCol := CreateTColumnEh(dbgDoc, 'I', '#0', '№ записи|№', 24, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := lkCol.Color;
        end;
{
      lkCol := CreateTColumnEh(dbgDoc, 'ID', '#0', '№ записи|код', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := lkCol.Color;
        end;
}
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_ID'  , '#0 ', 'ТМЦ|Код', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos      := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_LIST_ID', '', 'ТМЦ|Т.К.', 16, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos      := 1;
        Color             := Amunhotep.MainForm.StyleManager.Colors.Foreground + $202020;
        ReadOnly          := true;
        Footer.Color      := FixedColor;
        KeyList.Text      := '0'+#13#10+'1';
        PickList.Text     := 'ТМЦ'+#13#10+'ТехКарта';
        NotInKeyListIndex := 1;
        ImageList         := CreateTImageList(dbgDoc, 'ilCalc', [13,14]);
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_NAME', '', 'ТМЦ|Наименование', 160, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos         := 0;
        Color                := FixedColor + $202020;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taLeftJustify;
        Footer.Value         := 'ИТОГО';
        Footer.ValueType     := fvtStaticText;
{
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Удалить позицию из документа ?';
          Visible := true;
          OnClick := @dbgDoc_TMC_NAME_Delete_OnClick;
          end;
}
        end;
      lkCol := CreateTColumnEh(dbgDoc,'TMC_STATEFINE', '','ТМЦ|I' , 20,taLeftJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        KeyList.Clear ; KeyList.Add('1'); KeyList.Add('0');
        PickList.Clear; PickList.Add('X'); PickList.Add('-');
        CheckBoxes   := true;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_VEDCODE', '','ТМЦ|УКТВЭД'   , 56, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
{
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_ARTICLE', '', 'ТМЦ|Артикул', 60, taLeftJustify);
      with lkCol do
        begin
        Color        := $FFFFC0;
        InRowLinePos := 1;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
}        
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_EDIZM_SHORT', '', 'ТМЦ|единица|сокр', 32, taLeftJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_EDIZM_KSPOVO_CODE', '', 'ТМЦ|единица|КСПОВО', 42, taLeftJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
{
      lkCol := CreateTColumnEh(dbgDoc, 'PRICE_TMC', '#0.00', 'ТМЦ|внутр. цена',  60, taRightJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'QUANT_QUANT' , '#0', 'ТМЦ|ОСТАТКИ',  48, taRightJustify);
      with lkCol do
        begin
        Color                := $C0FFC0;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.000';
        Footer.ValueType     := fvtSum;
        end;
}
      lkCol := CreateTColumnEh(dbgDoc, 'QUANT'   , '#0', 'ТМЦ|кол',  48, taRightJustify);
      with lkCol do
        begin
        Color                := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly             := false;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.000';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'PRICE'   , '#0.00', 'ТМЦ|Цена'        ,  60, taRightJustify);
      with lkCol do
        begin
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TOTAL'   , '#0.00', 'ТМЦ|Сумма' ,  60, taRightJustify);
      with lkCol do
        begin
        Color                := FixedColor + $202020;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'PRICEPRINT' , '#0.00', 'Накладная|Цена 1 ед.',  60, taRightJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'NDPPRINT' , '#0.00', 'Накладная|НДС 1 ед.',  60, taRightJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'NDPTOTALPRINT', '#0.00', 'Накладная|НДС|сумма',  72, taRightJustify);
      with lkCol do
        begin
        Color                := dbgDoc.Color;
        ReadOnly             := false;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'FLAG_UPDNDP' , '', 'Накладная|НДС|X',  20, taLeftJustify);
      with lkCol do
        begin
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        KeyList.Clear ; KeyList.Add('1'); KeyList.Add('0');
        PickList.Clear; PickList.Add('X'); PickList.Add('-');
        CheckBoxes   := true;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TOTALPRINT' , '#0.00', 'Накладная|Всего',  72, taRightJustify);
      with lkCol do
        begin
        Color                := FixedColor + $202020;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;
      if(lkTYPE_ID = '1000134')then
        begin
        lkCol := CreateTColumnEh(dbgDoc, 'BILL_QUANT'   , '#0', 'Эта строка в "Налоговой накладной"|кол',  48, taRightJustify);
        with lkCol do
          begin
          Color                := $C0FFFF;
          ReadOnly             := true;
          Footer.Color         := FixedColor;
          Footer.Alignment     := taRightJustify;
          Footer.DisplayFormat := '#0.000';
          Footer.ValueType     := fvtSum;
          end;
        lkCol := CreateTColumnEh(dbgDoc, 'BILL_PRICEPRINT', '#0.00', 'Эта строка в "Налоговой накладной"|Цена'        ,  60, taRightJustify);
        with lkCol do
          begin
          Color        := $C0FFFF;
          ReadOnly     := false;
          Footer.Color := FixedColor;
          end;
        lkCol := CreateTColumnEh(dbgDoc, 'BILL_NDPTOTALPRINT', '#0.00', 'Эта строка в "Налоговой накладной"|НДС',  56, taRightJustify);
        with lkCol do
          begin
          Color                := $C0FFFF;
          ReadOnly             := true;
          Footer.Color         := FixedColor;
          Footer.Alignment     := taRightJustify;
          Footer.DisplayFormat := '#0.00 ';
          Footer.ValueType     := fvtSum;
          end;
        lkCol := CreateTColumnEh(dbgDoc, 'BILL_TOTALPRINT' , '#0.00', 'Эта строка в "Налоговой накладной"|Всего',  68, taRightJustify);
        with lkCol do
          begin
          Color                := $C0FFFF;
          ReadOnly             := true;
          Footer.Color         := FixedColor;
          Footer.Alignment     := taRightJustify;
          Footer.DisplayFormat := '#0.00 ';
          Footer.ValueType     := fvtSum;
          end;
        lkCol := CreateTColumnEh(dbgDoc, 'DELTA_QUANT'   , '#0', 'Значения корректировки|кол',  48, taRightJustify);
        with lkCol do
          begin
          Color                := $FFC0FF;
          ReadOnly             := true;
          Footer.Color         := FixedColor;
          Footer.Alignment     := taRightJustify;
          Footer.DisplayFormat := '#0.000';
          Footer.ValueType     := fvtSum;
          end;
        lkCol := CreateTColumnEh(dbgDoc, 'DELTA_PRICEPRINT'   , '#0.00', 'Значения корректировки|Цена'        ,  60, taRightJustify);
        with lkCol do
          begin
          Color        := $FFC0FF;
          ReadOnly     := false;
          Footer.Color := FixedColor;
          end;
        lkCol := CreateTColumnEh(dbgDoc, 'DELTA_NDPTOTALPRINT', '#0.00', 'Значения корректировки|НДС',  56, taRightJustify);
        with lkCol do
          begin
          Color                := $FFC0FF;
          ReadOnly             := true;
          Footer.Color         := FixedColor;
          Footer.Alignment     := taRightJustify;
          Footer.DisplayFormat := '#0.00 ';
          Footer.ValueType     := fvtSum;
          end;
        lkCol := CreateTColumnEh(dbgDoc, 'DELTA_TOTALPRINT' , '#0.00', 'Значения корректировки|Всего',  68, taRightJustify);
        with lkCol do
          begin
          Color                := $FFC0FF;
          ReadOnly             := true;
          Footer.Color         := FixedColor;
          Footer.Alignment     := taRightJustify;
          Footer.DisplayFormat := '#0.00 ';
          Footer.ValueType     := fvtSum;
          end;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_NAME2', '', 'ТМЦ|Наименование для РРО', 160, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos         := 0;
        Color                := FixedColor + $202020;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taLeftJustify;
        Footer.Value         := '';
        Footer.ValueType     := fvtStaticText;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_TYPE_NAME', '', 'ТМЦ|Тип', 24, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_BARCODE', '','ТМЦ|штрих-код', 72, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_NUMSHOW', '','ТМЦ|Код ИМ', 72, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_GROUP_NAME', '', 'ТМЦ|Группа', 72, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_CTGR_NAME', '', 'ТМЦ|Категория', 72, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc,'ENTRYDATE', 'dd.mm.yyyy','Таможенная декларация|Дата' , 72,taLeftJustify);
      with lkCol do
        begin
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc,'ENTRYBILL', ''          ,'Таможенная декларация|Номер', 96,taLeftJustify);
      with lkCol do
        begin
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc,'NAME'     , ''          ,'Примечания'                 ,200,taLeftJustify);
      with lkCol do
        begin
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        end;
      end; 

    trJournal := TxFBTransaction(Result.FindComponent('trJournal'));
    with trJournal do 
      begin 
      DefaultDataBase := FBDataBase; 
      Params.Clear; 
      Params.Add('isc_tpb_read_committed'); 
      Params.Add('isc_tpb_write'); 
      Params.Add('isc_tpb_rec_version'); 
      Params.Add('isc_tpb_nowait'); 
      end; 
    dtsJournal := TxFBDataSet(Result.FindComponent('dtsJournal'));
    with dtsJournal do
      begin 
      AfterOpen   := @dtsJournal_AfterOpen;
      BeforeClose := @dtsJournal_BeforeClose;
      AfterScroll := @dtsJournal_AfterScroll;
      SelectSQL.Text  := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG/DOC/1000014/EDIT_JRNL0001.SQL');
      RefreshSQL.Text := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG/DOC/1000014/EDIT_JRNL0001.SQL');
      ModifySQL.Text := 
        'EXECUTE BLOCK ( '+SQLCRLF+
        '  QID           DOMN$PSTRING  = ?ID '+SQLCRLF+
        ' ,QNAME         DOMN$PSTRING  = ?NAME '+SQLCRLF+
        ' ,QDATE_COMMIT  DOMN$DATETIME = ?DATE_COMMIT '+SQLCRLF+
        ' ,QDATE_IN      DOMN$DATETIME = ?DATE_IN '+SQLCRLF+
        ' ,QDOCNUMBER    DOMN$INTEGER  = ?DOCNUMBER '+SQLCRLF+
        ' ,QDOCNUMBERIN  DOMN$PSTRING  = ?DOCNUMBERIN '+SQLCRLF+
        ' ,QTAX_ID       DOMN$INTEGER  = ?TAX_ID '+SQLCRLF+
        ' ,QFLAG_PNP02   DOMN$BOOLEAN  = ?FLAG_PNP02 '+SQLCRLF+
        ')AS'+SQLCRLF+
        'BEGIN '+SQLCRLF+
        '  UPDATE TABL$J_4 J SET '+SQLCRLF+
        '     J.NAME        = :QNAME '+SQLCRLF+
        '    ,J.DATE_COMMIT = :QDATE_COMMIT '+SQLCRLF+
        '    ,J.DATE_IN     = :QDATE_IN '+SQLCRLF+
        '    ,J.DOCNUMBER   = :QDOCNUMBER '+SQLCRLF+
        '    ,J.DOCNUMBERIN = :QDOCNUMBERIN '+SQLCRLF+
        '  WHERE (J.ID = :QID); '+SQLCRLF+
        '  '+SQLCRLF+
        '  UPDATE TABL$J_1000014 JB1 SET '+SQLCRLF+
        '    JB1.TAX_ID     = :QTAX_ID '+SQLCRLF+
        '   ,JB1.FLAG_PNP02 = :QFLAG_PNP02 '+SQLCRLF+
        '  WHERE (JB1.J_ID = :QID); '+SQLCRLF+
        'END ';
      end 
    dtsDoc := TxFBDataSet(Result.FindComponent('dtsDoc'));
    with dtsDoc do
      begin 
      AfterOpen   := @dtsDoc_AfterOpen;
      BeforeClose := @dtsDoc_BeforeClose;
      AfterScroll := @dtsDoc_AfterScroll;
      SelectSQL.Text  := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG/DOC/1000014/EDIT_D1000014S.SQL');
      RefreshSQL.Text := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG/DOC/1000014/EDIT_D1000014R.SQL');
      ModifySQL.Text := 
        'UPDATE TABL$D_1000014 DB SET '+#13#10+
        '   DB.TMC_ID      = ?TMC_ID '+#13#10
        '  ,DB.QUANT       = ?QUANT '+#13#10+
        '  ,DB.PRICE       = ?PRICE '+#13#10+
        '  ,DB.J_BILLS_ID  = ?J_BILLS_ID '+#13#10+
        '  ,DB.ENTRYDATE   = ?ENTRYDATE '+#13#10+
        '  ,DB.ENTRYBILL   = ?ENTRYBILL '+#13#10+
        '  ,DB.NAME        = ?NAME '+#13#10+
        '  ,DB.NDPTOTAL    = ?NDPTOTALPRINT '+SQLCRLF+
        '  ,DB.FLAG_UPDNDP = ?FLAG_UPDNDP '+SQLCRLF+
        'WHERE  (DB.ID = ?ID) ';    
      DeleteSQL.Text := 'DELETE FROM TABL$D_1000014 B WHERE (B.ID = ?ID) ';
      end 
    DSdtsJournal := TDataSource(Result.FindComponent('DSdtsJournal'));
    DSdtsDoc     := TDataSource(Result.FindComponent('DSdtsDoc'));
    evDoc := TxFBEvents(Result.FindComponent('evDoc'));
    with evDoc do
      begin 
      Events.Clear;
      Events.Add('TABL$J_4');
      Events.Add('TABL$J_1000014');
      Events.Add('TABL$D_1000014');
      Events.Add('TABL$R_TMC');
      OnEventAlert := @evDoc_OnEventAlert;
      //if not Registered then 
      //  RegisterEvents; 
      end; 
    lkAct := FindTAction(Result,'actRefresh'      ,msg_actrefresh       ,msg_actrefresh_hint      ,SHORTCUT_DATA_REFRESH, 0,170); lkAct.OnExecute:=@actRefresh_OnExecute      ; 
    lkAct := FindTAction(Result,'actPrint'        ,msg_actprint         ,msg_actprint_hint        ,SHORTCUT_PRINT       , 0,105); lkAct.OnExecute:=@actPrint_OnExecute        ; lkAct.OnUpdate:=@actPrint_OnUpdate; 
    lkAct := FindTAction(Result,'actCommit'       ,msg_actcommit        ,msg_actcommit_hint       ,SHORTCUT_DOC_COMMIT  , 0,298); lkAct.OnExecute:=@actCommit_OnExecute       ; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actUnCommit'     ,msg_actuncommit      ,msg_actuncommit_hint     ,SHORTCUT_DOC_UNCOMMIT, 0,297); lkAct.OnExecute:=@actUnCommit_OnExecute     ; lkAct.OnUpdate:=@actUnCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actDocNew'       ,msg_actdocnew        ,msg_actdocnew_hint       ,''                   , 0,377); lkAct.OnExecute:=@actDocNew_OnExecute       ; 
    lkAct.Visible := false;
    lkAct := FindTAction(Result,'actDocReload'    ,'Перезагрузить'      ,'Перезагрузить документ от родительского' ,''  , 0,459); lkAct.OnExecute:=@actDocReload_OnExecute    ; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actDocExportGridXLS','Экспорт'        ,'Экспорт данных в Microsoft Excel'         ,''  , 0,  2); lkAct.OnExecute:=@actDocExportGridXLS_OnExecute;
    lkAct := FindTAction(Result,'actDocExportXML' ,msg_actexportxml     ,msg_actexportxml_hint    ,''                   , 0,  0); lkAct.OnExecute:=@actDocExportXml_OnExecute ; 
    lkAct := FindTAction(Result,'actPodbor'       ,msg_actpodbor        ,msg_actpodbor_hint       ,''                   , 0,312); lkAct.OnExecute:=@actPodbor_OnExecute       ; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actPodborGroup'  ,msg_actpodborgroup   ,msg_actpodborgroup_hint  ,''                   , 0,312); lkAct.OnExecute:=@actPodborGroup_OnExecute  ; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actPodborId'     ,msg_actpodborid      ,msg_actpodborid_hint     ,''                   , 0,176); lkAct.OnExecute:=@actPodborId_OnExecute     ; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actPodborNewTMC' ,msg_actpodbornewtmc  ,msg_actpodbornewtmc_hint ,SHORTCUT_DATA_CREATE , 0,181); lkAct.OnExecute:=@actPodborNewTMC_OnExecute ; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actPodborBarcode',msg_actpodborbarcode ,msg_actpodborbarcode_hint,''                   , 0,176); lkAct.OnExecute:=@actPodborBarcode_OnExecute; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actPodborArticle',msg_actpodborArticle ,msg_actpodborArticle_hint,''                   , 0,176); lkAct.OnExecute:=@actPodborArticle_OnExecute; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actTMCEdit'      ,msg_acttmcedit       ,msg_acttmcedit_hint      ,SHORTCUT_DATA_EDIT   , 0,390); lkAct.OnExecute:=@actTMCEdit_OnExecute      ; //lkAct.OnUpdate:=@actCommit_OnUpdate;
    lkAct := FindTAction(Result,'actDocDelete'    ,msg_actdocdelete     ,msg_actdocdelete_hint    ,''                   , 0,177); lkAct.OnExecute:=@actDocDelete_OnExecute    ; lkAct.OnUpdate:=@actCommit_OnUpdate;
    RefreshView;
    Amunhotep.MainForm.TaskBar.ButtonByForm(Result).Down := true;
  end;
  //============================================================================
begin
  TMC_ID_SAVED := '';
  DocForm := DocForm_Create;
end.
