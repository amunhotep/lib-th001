EXECUTE BLOCK (
   Q_TYPE_ID       TYPE OF COLUMN TABL$_TB_TYPES.ID = ?Q_TYPE_ID 
)RETURNS ( 
   TYPE_ID         TYPE OF COLUMN TABL$_TB_TYPES.ID 
  ,TYPE_EXISTS     TYPE OF COLUMN TABL$_TB_TYPES.FLAG_DELETE 
  ,TYPE_NAME       TYPE OF COLUMN TABL$_TB_TYPES.NAME 
  ,TYPE_NAME2      TYPE OF COLUMN TABL$_TB_TYPES.NAME2
  ,TB_ID_MAIN      TYPE OF COLUMN TABL$_TB.ID
  ,TB_REL_EXISTS   TYPE OF COLUMN TABL$_TB_TYPES.FLAG_DELETE
  ,BUFFER_VAR_MAIN TYPE OF COLUMN TABL$_TB.BUFFER_VAR 
  ,TYPES_LIST      DOMN$BLOB_TEXT
)AS 
BEGIN 
  TYPE_EXISTS = 0; 
  IF(NOT(EXISTS(SELECT TB.ID FROM TABL$_TB_TYPES TB WHERE(TB.ID = :Q_TYPE_ID))))THEN 
    BEGIN 
    SUSPEND; 
    EXIT; 
    END 
  TYPE_EXISTS = 1; 

  SELECT FIRST 1 T.ID, T.NAME, T.NAME2 
  FROM   TABL$_TB_TYPES T 
  WHERE  (T.ID = :Q_TYPE_ID) 
  INTO   :TYPE_ID, :TYPE_NAME, :TYPE_NAME2; 

  SELECT FIRST 1 TB.ID, TB.BUFFER_VAR
  FROM   TABL$_TB TB
  WHERE  (TB.TYPE_ID = 4)
    AND  (TB.BASE_TYPE_ID = TB.TYPE_ID)
    AND  (TB.FLAG_MASTER = 1)
  INTO  :TB_ID_MAIN, :BUFFER_VAR_MAIN;

  TB_REL_EXISTS = 0;
  IF(NOT(EXISTS(SELECT R.RDB$RELATION_ID FROM RDB$RELATIONS R WHERE(TRIM(R.RDB$RELATION_NAME) = :TB_ID_MAIN))))THEN
    BEGIN 
    SUSPEND; 
    EXIT; 
    END 
  TB_REL_EXISTS = 1;

  WITH RECURSIVE DOCTREE AS(
    SELECT DOCTREE1.ID, DOCTREE1.PARENT_ID FROM TABL$_TB_TYPES DOCTREE1 WHERE (DOCTREE1.ID = :Q_TYPE_ID)
    UNION ALL
    SELECT DOCTREE2.ID, DOCTREE2.PARENT_ID FROM TABL$_TB_TYPES DOCTREE2, DOCTREE DOCTREE3 WHERE (DOCTREE2.PARENT_ID = DOCTREE3.ID)
  )SELECT FIRST 1 '~'||LIST(DTR.ID,'~')||'~' FROM DOCTREE DTR INTO :TYPES_LIST;

  TYPES_LIST = REPLACE(:TYPES_LIST, '~900', '~100' );

  SUSPEND; 
END
