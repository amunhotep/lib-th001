{$IFNDEF PEAKTOP:GLOBAL_VARIABLES.INC}           {$I PEAKTOP:GLOBAL_VARIABLES.INC}         {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOLUMNEH.INC}              {$I PEAKTOP:OBJ/TCOLUMNEH.INC}            {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOLUMNEH_KEYLST.INC}       {$I PEAKTOP:OBJ/TCOLUMNEH_KEYLST.INC}     {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TIMAGELIST.INC}             {$I PEAKTOP:OBJ/TIMAGELIST.INC}           {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TACTION.INC}                {$I PEAKTOP:OBJ/TACTION.INC}              {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCGRADIENTPANELVISTA.INC}  {$I PEAKTOP:OBJ/TXCGRADIENTPANELVISTA.INC}{$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/OBJECTNAMES.INC}    {$I PEAKTOP:IDE/ERP/DBO/OBJECTNAMES.INC}  {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}      {$I PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}    {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/CONFIG2/DOC/SQLEXEC.INC}{$I ../SQLEXEC.INC}                       {$ENDIF}
const
  msg_invalid_resource   = 'Неверный файл ресурсов'; 
  msg_caption            = 'Документ'; 
  msg_lbldate            = 'Дата'; 
  msg_lblname            = 'Примечание'; 
  msg_lblcs              = 'Контрагент'; 
  msg_lblplace           = 'Место хранения'; 
  msg_lblwrk             = 'Автомобиль'; 
  msg_lblfilial          = 'Филиал'; 
  msg_lbluser            = 'Пользователь'; 
  msg_lblid              = 'Код'; 
  msg_lblnumber          = 'Номер'; 
  msg_lblnumberfull      = 'Полный №'; 
  msg_lblnumberin        = 'Входящий №'; 
  msg_lblfirm            = 'Фирма'; 
  msg_lbluserwrk         = 'Сотрудник'; 
  msg_lbldatein          = 'Дата'; 
  msg_lblKM              = 'Текущие показания спидометра';
  msg_actrefresh         = 'Обновить'; 
  msg_actrefresh_hint    = 'Сохранитьдокумент в базу и обновить'; 
  msg_actprint           = 'Печать'; 
  msg_actprint_hint      = 'Выбор шаблона печати документа'; 
  msg_actcommit          = 'Провести'; 
  msg_actcommit_hint     = 'Провести документ'; 
  msg_actuncommit        = 'Отменить'; 
  msg_actuncommit_hint   = 'Отменить проведение документа'; 
  msg_actdocadd          = 'Добавить'; 
  msg_actdocadd_hint     = 'Добавить запчасть или услугу'; 
  msg_actdocdel          = 'Удалить'; 
  msg_actdocdel_hint     = 'Удалить позицию из документа'; 
  msg_actwrkadd          = 'Добавить'; 
  msg_actwrkadd_hint     = 'Добавить сотрудника в выполнение заказа'; 
  msg_actwrkdel          = 'Удалить'; 
  msg_actwrkdel_hint     = 'Удалить сотрудника из выполнения заказа';
  msg_actJNewAddPay      = 'Оплата'; 
  msg_actJNewAddPay_hint = 'Добавить оплату к текущему документу';
var 
  J_ID                :string;
  DocForm             :TAmunhotepForm; 
  TopBar              :TxcGradientPanelVista; 
  ImgLogo             :TImage; 
  ToolBar             :TxcGradientPanelVista; 
  PanelClient         :TxcGradientPanel; 
  dbeCS_ID_           :TDBEditEh; 
  dbeNAME             :TDBEditEh; 
  dbdtpDATE_COMMIT    :TDBDateTimeEditEh; 
  dbePLACE_ID_        :TDBEditEh; 
  dbeTMC_ID_          :TDBEditEh; 
  dbeFILIAL_ID_       :TDBEditEh; 
  dbeUSER_ID          :TDBEditEh; 
  dbeID               :TDBEditEh; 
  dbeDOCNUMBER        :TDBEditEh; 
  dbeDOCNUMBERSTR     :TDBEditEh; 
  dbeDOCNUMBERIN      :TDBEditEh; 
  dbeFIRM_ID_         :TDBEditEh; 
  dbeWRK_NAME         :TDBEditEh; 
  dbdtpDATE_IN        :TDBDateTimeEditEh; 
  dbeKM               :TDBEditEh; 
  dbeKM_WAS           :TDBEditEh; 
  dbeKM_GONE          :TDBEditEh; 
  dbeDOCSUMLEFT       :TDBEditEh;
  PCDoc               :TxcPageControlEx; 
  tsData              :TxcTabSheet; 
  tsWrk               :TxcTabSheet; 
  PanelToolBarDoc     :TxcGradientPanelVista; 
  PanelToolBarWrk     :TxcGradientPanelVista; 
  dbgDoc              :TDBGridEh; 
  dbgWrk              :TDBGridEh; 
  trJournal           :TxFBTransaction; 
  dtsJournal          :TxFBDataSet; 
  dtsDoc              :TxFBDataSet; 
  DSdtsJournal        :TDataSource; 
  DSdtsDoc            :TDataSource; 
  evDoc               :TxFBEvents; 
  dtsWrk              :TxFBDataSet; 
  DSdtsWrk            :TDataSource; 
  //============================================================================
  procedure CloseDataSets;
  begin
    if(dtsJournal.State = dsEdit)then
      try
        dtsJournal.Post;
      except
        dtsJournal.Cancel;
      end;
    if trJournal.InTransaction then 
      trJournal.Commit; 
  end;
  //============================================================================
  procedure RefreshView;
  begin 
    CloseDataSets;
    dtsJournal.Prepare;
    dtsJournal.ParamByName('J_ID').AsString := DocForm.HelpKeyWord; 
    try 
      dtsJournal.Open;
    except 
      // Dialogs.MessageDlg(dtsJournal.SelectSQL.Text, mtError, [mbOk]);
    end; 
  end;
  //============================================================================
  procedure RefreshDetail;
  begin
    if dtsDoc.Active then dtsDoc.Close;
    if dtsWrk.Active then dtsWrk.Close;
    dtsDoc.Open; 
    dtsWrk.Open; 
  end;
  //============================================================================
  procedure dbeDOCNUMBER_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkNumber :string;
    lkTr     :TxFBTransaction;
    lkQr     :TxFBQuery;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkNumber := '';
    lkTr := TxFBTransaction.Create(nil);
    with lkTr do
      begin
      DefaultDataBase := dtsJournal.DataBase;
      with Params do
        begin
        Clear;
        Add('isc_tpb_read_committed');
        Add('isc_tpb_write');
        Add('isc_tpb_rec_version');
        Add('isc_tpb_nowait');
        end;
      end;
    lkQr := TxFBQuery.Create(lkTr);
    with lkQr do
      begin
      Transaction := lkTr;
      SQL.Text := 'SELECT FIRST 1 P.NEW_NUMBER FROM PROC$J_GEN_4('+dtsJournal.FieldByName('TYPE_ID').AsString+', '+dtsJournal.FieldByName('FIRM_ID').AsString+') P ';
      try
        Open;
      except 
        if lkTr.InTransaction then lkTr.Rollback;
        lkTr.Free;
        exit;
      end;
      if Active then
        begin
        First;
        lkNumber := FieldByName('NEW_NUMBER').AsString;
        end;
      end;
    if lkTr.InTransaction then 
      lkTr.Commit;
    lkTr.Free;
    lkNumber := StrCiphersOnlyInt(lkNumber);
    if(StrTrimAll(lkNumber) = '')then exit;
    with dtsJournal do
      begin
      Edit;
      FieldByName('DOCNUMBER').AsString := lkNumber;
      try Post; except Cancel end;
      end;
  end;
  //============================================================================
  procedure dbeCS_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'CS_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('CS_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/CS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 
      'EXECUTE BLOCK '+SQLCRLF+
      'AS '+SQLCRLF+
      '  DECLARE VARIABLE P_TMC_ID TYPE OF COLUMN TABL$R_TMC.ID; '+SQLCRLF+
      'BEGIN '+SQLCRLF+
      '  P_TMC_ID = 0; '+SQLCRLF+
      '  SELECT FIRST 1 COALESCE(V.ID, 0) '+SQLCRLF+
      '  FROM   VIEW$R_TMC_AUTO V '+SQLCRLF+
      '  WHERE  (V.CS_ID = '''+lkBUFFER_ID+''') '+SQLCRLF+
      '  INTO   :P_TMC_ID; '+SQLCRLF+
      '  UPDATE TABL$J_1000153 TB SET TB.CS_ID = '''+lkBUFFER_ID+''', TB.TMC_ID = :P_TMC_ID WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+'''); '+SQLCRLF+
      'END';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure dbeCS_ID_Edit_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    SetGlobalVariable('CS_ID', dtsJournal.FieldByName('CS_ID').AsString);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/CS/DEFAULT_ITEM.PS');
  end;
  //============================================================================
  procedure dbePLACE_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'PLACE_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('PLACE_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/PLACES/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000153 TB SET TB.PLACE_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure dbeTMC_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
    lkScript       :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'TMC_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('TMC_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    lkScript := 
      '{$IFNDEF PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}  {$I PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}{$ENDIF} '+SQLCRLF+
      'begin '+SQLCRLF+
      '  TERPFormGrid_DataSetFilter_Add(''CS_ID'', ''CS_ID = '''''+dtsJournal.FieldByName('CS_ID').AsString+''''' ''); '+SQLCRLF+ 
      '  Reference_Execute(''VIEW$R_TMC_AUTO''); '+SQLCRLF+
      'end. '+SQLCRLF;
    run(lkScript, 'PEAKTOP:IDE/ERP/CONFIG2/REF/TMC_AUTO/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000153 TB SET TB.TMC_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure dbeTMC_ID_Create_OnButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkID   :string;
    lkSQL  :string;
    lkScript:string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount > 0)then exit; 
    lkSQL := 
      'EXECUTE BLOCK '+SQLCRLF+
      'AS '+SQLCRLF+
      '  DECLARE VARIABLE P_TMC_ID TYPE OF COLUMN TABL$R_TMC.ID; '+SQLCRLF+
      'BEGIN '+SQLCRLF+
      '  INSERT INTO VIEW$R_TMC_AUTO(TMC_GROUP_ID, NUMSHOW, TMC_BRAND_ID, DEV_TMC_BRAND_ID, CS_ID) '+SQLCRLF+
      '    VALUES(100005, ''XXXX'', 1000118, 1000118, '+dtsJournal.FieldByName('CS_ID').AsString+')RETURNING ID INTO :P_TMC_ID; '+SQLCRLF+
      '  UPDATE TABL$J_1000153 J SET J.TMC_ID = :P_TMC_ID WHERE (J.J_ID = '+dtsJournal.FieldByName('ID').AsString+'); '+SQLCRLF+
      'END';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount > 0)then exit; 
    lkID := dtsJournal.FieldByName('TMC_ID').AsString;
    SetGlobalVariable('TMC_ID', lkID);
    if call('PEAKTOP:IDE/ERP/CONFIG2/REF/TMC_AUTO/DEFAULT_ITEM_DLG.PS') then
      RefreshView;
  end; 
  //============================================================================
  procedure dbeTMC_ID_Edit_OnButtonClick(Sender :TObject; var Handled : Boolean);
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    if(dtsJournal.FieldByName('TMC_ID').AsInteger = 0)then
      begin
      Dialogs.MessageDlg('Не удаётся вызвать диалог редактирования карточки ТМЦ, не указан Автомобиль.', mtInformation, [mbOk]);
      exit;
      end;
    SetGlobalVariable('TMC_ID', dtsJournal.FieldByName('TMC_ID').AsString);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/TMC_AUTO/DEFAULT_ITEM_DLG.PS');
    RefreshView;
  end; 
  //============================================================================
  procedure dbeTMC_ID_Clear_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL :string;
  begin
    Handled := true; 
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkSQL := 'UPDATE TABL$J_1000153 TB SET TB.TMC_ID = 0 WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure dbeFILIAL_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'FILIAL_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('FILIAL_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/FILIALS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_4 TB SET TB.FILIAL_ID = '''+lkBUFFER_ID+''' WHERE(TB.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure dbeUSER_ID_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'USER_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('USER_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/_USERS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_4 TB SET TB.USER_ID = '''+lkBUFFER_ID+''' WHERE(TB.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure dbgDoc_OnGetCellParams(Sender: TObject; Column: TColumnEh; 
              AFont: TFont; var Background: TColor; State: TGridDrawState);
  begin
   if(Column.Tag=666)then exit;
   if(not(Column.Field.DataSet.Active))then exit;
   if(not(Column.Field.DataSet.RecordCount > 0))then exit;
   //if    (Column.Field.DataSet.FieldByName('FLAG_COMMIT').AsInteger=0)then aFont.Style:= aFont.Style + [fsBold     ];
   //Background := Column.Field.DataSet.FieldByName('COLOR_BGR').AsInteger;
   //aFont.Color:= Column.Field.DataSet.FieldByName('COLOR_FRG').AsInteger;
   if(Background=clWhite)then Background := Amunhotep_MainForm_StyleManager.Colors.Window;
   if(aFont.Color=Background)then aFont.Color := Amunhotep_MainForm_StyleManager.Colors.Border;
  end;
  //============================================================================
  procedure dbgWrk_OnGetCellParams(Sender: TObject; Column: TColumnEh; 
              AFont: TFont; var Background: TColor; State: TGridDrawState);
  begin
   if(Column.Tag=666)then exit;
   if(not(Column.Field.DataSet.Active))then exit;
   if(not(Column.Field.DataSet.RecordCount > 0))then exit;
   //if    (Column.Field.DataSet.FieldByName('FLAG_COMMIT').AsInteger=0)then aFont.Style:= aFont.Style + [fsBold     ];
   //Background := Column.Field.DataSet.FieldByName('COLOR_BGR').AsInteger;
   //aFont.Color:= Column.Field.DataSet.FieldByName('COLOR_FRG').AsInteger;
   if(Background=clWhite)then Background := Amunhotep_MainForm_StyleManager.Colors.Window;
   if(aFont.Color=Background)then aFont.Color := Amunhotep_MainForm_StyleManager.Colors.Border;
  end;
  //============================================================================
  procedure dtsJournal_AfterOpen(DataSet :TDataSet);
  begin
    RefreshDetail;
  end;
  //============================================================================
  procedure dtsJournal_BeforeClose(DataSet :TDataSet);
  begin
    if dtsDoc.Active then
      begin
      if(dtsDoc.State = dsEdit)then
        try
          dtsDoc.Post;
        except
          dtsDoc.Cancel;
        end;
      dtsDoc.Close;  
      end;  
  end;
  //============================================================================
  procedure dtsJournal_AfterScroll(DataSet :TDataSet);
  var
    lkTypeId, i :Integer;
  begin
    lkTypeId := DataSet.FieldByName('TYPE_ID').AsInteger;
    DocForm.Caption := DataSet.FieldByName('TYPE_ID_').AsString+' '+DataSet.FieldByName('DOCNUMBERSTR').AsString;
    DocForm.SetCaption(DocForm.Caption);
    TopBar.Caption := #$20#$20#$20#$20#$20#$20+DocForm.Caption;
    PanelClient.Colors.Window := DataSet.FieldByName('COLOR_BGR').AsInteger;
    PanelClient.Font.Color    := DataSet.FieldByName('COLOR_FRG').AsInteger;
    for i:=0 to PanelClient.ControlCount-1 do
      if ObjectInheritsFrom(PanelClient.Controls[i], 'TLABEL') then
        TLabel(PanelClient.Controls[i]).Font.Color := DataSet.FieldByName('COLOR_FRG').AsInteger;
    dbgDoc.ReadOnly := (DataSet.FieldByName('FLAG_COMMIT').AsInteger = 1);
    dbgWrk.ReadOnly := (DataSet.FieldByName('FLAG_COMMIT').AsInteger = 1);
    PanelClient.Enabled := not dbgDoc.ReadOnly;
    if dbgDoc.ReadOnly then
      begin
      dbgDoc.Options := [dgRowSelect, dgAlwaysShowSelection,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs];
      dbgWrk.Options := [dgRowSelect, dgAlwaysShowSelection,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs];
      end 
     else
      begin
      dbgDoc.Options := [dgEditing,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs,dgConfirmDelete,dgCancelOnExit,dgAlwaysShowSelection,dgMultiSelect];
      dbgWrk.Options := [dgEditing,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs,dgConfirmDelete,dgCancelOnExit,dgAlwaysShowSelection,dgMultiSelect];
      end;
    if(DataSet.FieldByName('DOCSUMLEFT').AsFloat > 0)then
      dbeDOCSUMLEFT.Color := Amunhotep.MainForm.StyleManager.Colors.Error
    else
      dbeDOCSUMLEFT.Color := Amunhotep.MainForm.StyleManager.Colors.Foreground;
  end;
  //============================================================================
  procedure dtsDoc_OnFieldChange(Sender: TField);
  begin
    if(Sender.DataSet.State <> dsInsert)then
      RefreshView;  
  end;
  //============================================================================
  procedure dtsDoc_AfterOpen(DataSet :TDataSet);
  var
    i:Integer;
  begin
    for i:=0 to DataSet.Fields.Count-1 do
      if((DataSet.Fields[i].FieldName = 'PRICE')or
         (DataSet.Fields[i].FieldName = 'QUANT'))then
        DataSet.Fields[i].OnChange := @dtsDoc_OnFieldChange;
    if(DataSet.Tag <> 0)then
      DataSet.RecNo := DataSet.Tag;
  end;
  //============================================================================
  procedure dtsDoc_BeforeClose(DataSet :TDataSet);
  begin
    DataSet.Tag := DataSet.RecNo;
  end;
  //============================================================================
  procedure dtsDoc_AfterScroll(DataSet :TDataSet);
  begin
  end;
  //============================================================================
  procedure dtsWrk_AfterOpen(DataSet :TDataSet);
  begin
  end;
  //============================================================================
  procedure dtsWrk_BeforeClose(DataSet :TDataSet);
  begin
  end;
  //============================================================================
  procedure dtsWrk_AfterScroll(DataSet :TDataSet);
  begin
  end;
  //============================================================================
  procedure actRefresh_OnExecute(Sender :TObject);
  begin
    RefreshView;
  end;
  //============================================================================
  procedure actPrint_OnExecute(Sender :TObject);
  var
    lkScName:string;
  begin
    if not dtsJournal.Active then exit;
    if(not(dtsJournal.RecordCount>0))then exit;
    lkScName := 'PEAKTOP:IDE/ERP/CONFIG2/DOC/'+dtsJournal.FieldByName('TYPE_ID').AsString+'/PRINT.PS';
    SetGlobalVariable('J_ID', dtsJournal.FieldByName('ID').AsString);
    if not call(lkScName)then
      Dialogs.MessageDlg('Ошибка в вызове скрипта '+SQLCRLF+lkScName, mtError, [mbOk]);
  end;
  //============================================================================
  procedure actPrint_OnUpdate(Sender :TObject);
  var
    lkEnabled :Boolean;
  begin
    lkEnabled := dtsJournal.Active;
    if(lkEnabled)then lkEnabled := (dtsJournal.RecordCount > 0);
    TCustomAction(Sender).Enabled := lkEnabled;
  end;  
  //============================================================================
  procedure actCommit_OnExecute(Sender :TObject);
  var
    lkJ_ID :string;
    lkSQL  :string;
  begin
    if not dtsJournal.Active then exit;  
    if not(dtsJournal.RecordCount > 0)then exit;
    lkJ_ID:= dtsJournal.FieldByName('ID').AsString;  
    lkSQL := StringsLoadFromFile( PrepareAbsoleteFileName('PEAKTOP:IDE/ERP/CONFIG2/DOC/1000153/SQL_COMMIT.SQL') );
    if not(Dialogs.MessageDlg(msg_actcommit_hint+' ?', mtConfirmation, [mbYes, mbNo])=mrYes)then exit;
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, ['J_ID'], [lkJ_ID]);
    RefreshView;
  end;
  //============================================================================
  procedure actCommit_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actUnCommit_OnExecute(Sender :TObject);
  var
    lkJ_ID :string;
    lkSQL  :string;
  begin
    if not dtsJournal.Active then exit;  
    if not(dtsJournal.RecordCount > 0)then exit;
    lkJ_ID:= dtsJournal.FieldByName('ID').AsString;  
    lkSQL := StringsLoadFromFile( PrepareAbsoleteFileName('PEAKTOP:IDE/ERP/CONFIG2/DOC/1000153/SQL_UNCOMMIT.SQL') );
    if not(Dialogs.MessageDlg(msg_actuncommit_hint+' ?', mtConfirmation, [mbYes, mbNo])=mrYes)then exit;
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, ['J_ID'], [lkJ_ID]);
    RefreshView;
  end;
  //============================================================================
  procedure actUnCommit_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount > 0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger <> 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actDocAdd_OnExecute(Sender :TObject);
  var
    lkTMC_ID :string;
    lkSQL    :string;
  begin
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/TMC/DEFAULT_DLG.PS');
    lkTMC_ID := GetGlobalVariable('TMC_ID');
    if( (StrTrimAll(lkTMC_ID)='') or (UpperCase(lkTMC_ID)='NULL'))then exit;
    lkSQL := 
      'EXECUTE BLOCK '+SQLCRLF+
      'AS '+SQLCRLF+
      '  DECLARE VARIABLE P_TMC_ID  TYPE OF COLUMN TABL$D_1000014.TMC_ID; '+SQLCRLF+
      '  DECLARE VARIABLE P_PRICE   TYPE OF COLUMN TABL$D_1000014.PRICE; '+SQLCRLF+
      '  DECLARE VARIABLE P_QUANT   TYPE OF COLUMN TABL$D_1000014.QUANT; '+SQLCRLF+
      '  DECLARE VARIABLE P_FIRM_ID TYPE OF COLUMN TABL$J_4.FIRM_ID; '+SQLCRLF+
      '  DECLARE VARIABLE P_DATE    TYPE OF COLUMN TABL$J_4.DATE_COMMIT; '+SQLCRLF+
      'BEGIN '+SQLCRLF+
      '  P_FIRM_ID = '+dtsJournal.FieldByName('FIRM_ID').AsString+' ; '+SQLCRLF+
      '  P_TMC_ID  = '+lkTMC_ID+'; '+SQLCRLF+
      '  P_QUANT   = 1.000; '+SQLCRLF+
      '  P_PRICE   = 0.000; '+SQLCRLF+
      '  P_DATE    = NULL; '+SQLCRLF+
      '  SELECT MAX(Q.DATE_COMMIT) '+SQLCRLF+
      '  FROM   TABL$P_TMCQUANT Q '+SQLCRLF+
      '  WHERE  (Q.PARENT_ID   = 0) '+SQLCRLF+
      '    AND  (Q.TMC_ID      = :P_TMC_ID) '+SQLCRLF+
      '    AND  ((Q.FIRM_ID+0) = :P_FIRM_ID) '+SQLCRLF+      
      '  INTO   :P_DATE; '+SQLCRLF+
      '  IF(:P_DATE IS NULL)THEN '+SQLCRLF+
      '    BEGIN '+SQLCRLF+
      '    SELECT FIRST 1 COALESCE(P.PRICE, 0) '+SQLCRLF+
      '    FROM   TABL$R_TMC T,  TABL$R_TMC_P P '+SQLCRLF+
      '    WHERE  (T.ID = :P_TMC_ID) '+SQLCRLF+
      '      AND  (P.TMC_ID = T.ID) '+SQLCRLF+
      '      AND  (P.VALUE_DATE = T.VALUE_DATE) '+SQLCRLF+
      '    INTO   :P_PRICE; '+SQLCRLF+
      '    END '+SQLCRLF+
      '  ELSE '+SQLCRLF+
      '    BEGIN '+SQLCRLF+
      '    SELECT FIRST 1 COALESCE(Q.PRICE_IN, 0) '+SQLCRLF+
      '    FROM   TABL$P_TMCQUANT Q '+SQLCRLF+
      '    WHERE  (Q.PARENT_ID   = 0) '+SQLCRLF+
      '      AND  (Q.TMC_ID      = :P_TMC_ID) '+SQLCRLF+
      '      AND  ((Q.FIRM_ID+0) = :P_FIRM_ID) '+SQLCRLF+      
      '      AND  (Q.DATE_COMMIT = :P_DATE) '+SQLCRLF+
      '    INTO   :P_PRICE; '+SQLCRLF+
      '    P_PRICE = TRUNC( (:P_PRICE * 1.2), 2); '+SQLCRLF+
      '    END '+SQLCRLF+
      '  INSERT INTO TABL$D_1000014(J_ID, TMC_ID, QUANT, PRICE) '+SQLCRLF+
      '    VALUES('+dtsJournal.FieldByName('ID').AsString+', :P_TMC_ID, :P_QUANT, :P_PRICE); '+SQLCRLF+
      'END';    
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure actDocAdd_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actDocDel_OnExecute(Sender :TObject);
  var
    lkSQL :string;
    i     :Integer;
  begin    
    if not dtsDoc.Active then exit;  
    if not(dtsDoc.RecordCount>0)then exit;  
    if(Dialogs.MessageDlg('Удалить позицию из документа ?', mtConfirmation, [mbYes, mbNo]) <> mrYes)then exit;
    if(dbgDoc.SelectedRows.Count > 0)then
      begin
      dbgDoc.DataSource.DataSet.DisableControls;
      dbgDoc.SaveBookMark; 
      lkSQL := 'DELETE FROM TABL$D_1000014 D WHERE (D.ID IN ('+dbgDoc.DataSource.DataSet.FieldByName('ID').AsString;
      for i:=0 to dbgDoc.SelectedRows.Count-1 do
        begin
        dbgDoc.DataSource.DataSet.Bookmark := dbgDoc.SelectedRows[i];
        lkSQL := lkSQL + ', '+dbgDoc.DataSource.DataSet.FieldByName('ID').AsString;
        end;
      lkSQL := lkSQL + ') ); ';
      dbgDoc.RestoreBookMark; 
      dbgDoc.DataSource.DataSet.EnableControls;
      end
     else 
      lkSQL := 'DELETE FROM TABL$D_1000014 D WHERE (D.ID = '''+dtsDoc.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure actDocDel_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount > 0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 0);
    if(lk_Enabled)then lk_Enabled := dtsDoc.Active;
    if(lk_Enabled)then lk_Enabled := (dtsDoc.RecordCount > 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actWrkAdd_OnExecute(Sender :TObject);
  var
    lkWRK_ID :string;
    lkSQL    :string;
  begin
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/WRK/DEFAULT_DLG.PS');
    lkWRK_ID := GetGlobalVariable('WRK_ID');
    if( (StrTrimAll(lkWRK_ID)='') or (UpperCase(lkWRK_ID)='NULL'))then exit;
    lkSQL := 'INSERT INTO TABL$D_1000153WRK(J_ID, WRK_ID, WRK_PC)VALUES('''+dtsJournal.FieldByName('ID').AsString+''', '''+lkWRK_ID+''', 100.000)';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure actWrkAdd_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actWrkDel_OnExecute(Sender :TObject);
  var
    lkSQL :string;
    i     :Integer;
  begin    
    if not dtsWrk.Active then exit;  
    if not(dtsWrk.RecordCount > 0)then exit;  
    if(Dialogs.MessageDlg('Удалить позицию из документа ?', mtConfirmation, [mbYes, mbNo]) <> mrYes)then exit;
    if(dbgWrk.SelectedRows.Count > 0)then
      begin
      dbgWrk.DataSource.DataSet.DisableControls;
      dbgWrk.SaveBookMark; 
      lkSQL := 'DELETE FROM TABL$D_1000153WRK D WHERE (D.ID IN ('+dbgWrk.DataSource.DataSet.FieldByName('ID').AsString;
      for i:=0 to dbgWrk.SelectedRows.Count-1 do
        begin
        dbgWrk.DataSource.DataSet.Bookmark := dbgWrk.SelectedRows[i];
        lkSQL := lkSQL + ', '+dbgWrk.DataSource.DataSet.FieldByName('ID').AsString;
        end;
      lkSQL := lkSQL + ') ); ';
      dbgWrk.RestoreBookMark; 
      dbgWrk.DataSource.DataSet.EnableControls;
      end
     else 
      lkSQL := 'DELETE FROM TABL$D_1000153WRK D WHERE (D.ID = '''+dtsWrk.FieldByName('ID').AsString+''')';
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, [],[]);
    RefreshView;
  end;
  //============================================================================
  procedure actWrkDel_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 0);
    if(lk_Enabled)then lk_Enabled := dtsWrk.Active;
    if(lk_Enabled)then lk_Enabled := (dtsWrk.RecordCount>0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actJNewAddPay_OnExecute(Sender :TObject);
  var
    lkJ_ID   :string;
    lkSQL    :string;
    lkSum    :Extended;
    lkSumLeft:Extended;
  begin
    if not dtsJournal.Active then exit;  
    if not(dtsJournal.RecordCount > 0)then exit;
    lkJ_ID    := dtsJournal.FieldByName('ID').AsString;  
    lkSumLeft := dtsJournal.FieldByName('DOCSUMLEFT').AsFloat;
    lkSQL := StringsLoadFromFile( PrepareAbsoleteFileName('PEAKTOP:IDE/ERP/CONFIG2/DOC/1000153/SQL_JINS_1000020.SQL') );
    lkSum := lkSumLeft;
    if not Dialogs.InputQueryExtended(msg_actJNewAddPay_hint, 'Введите сумму оплаты', lkSum)then exit;
    if( (lkSum > lkSumLeft) and (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 1) )then
      begin
      if(Dialogs.MessageDlg(
        'Долг по заказу: '+FormatFloat('# ### ##0.00', lkSumLeft)+#10#10+
        'Вы вводите сумму оплаты: '+FormatFloat('# ### ##0.00', lkSum)+#10#10+
        'После проведения сумма переплаты: '+FormatFloat('# ### ##0.00', lkSum - lkSumLeft)+#10#10+
        ''+#10#10+
        'Вы действительно хотите добавить оплату с переплатой по заказу ?'
      , mtConfirmation, [mbYes, mbNo]) <> mrYes)then exit;
      end;
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, ['J_ID','J_DOCSUM'], [lkJ_ID, StrReplaceStr(FormatFloat('#0.00', lkSum) ,',','.')]);
    RefreshView;
  end;
  //============================================================================
  procedure dbeJournalRW_OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  begin
    if(Shift = [])then
      begin
      if(Key = $0D (*VK_RETURN*) )then 
        begin
        RefreshView;
        TForm(TComponent(Sender).Owner).Perform($0028 {WM_NEXTDLGCTL}, 0, 0);
        end;
      end;   
  end;
  //============================================================================
  procedure dbeJournalRO_OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  begin
    if(Shift = [])then
      begin
      if(Key = $0D (*VK_RETURN*) )then 
        TForm(TComponent(Sender).Owner).Perform($0028 {WM_NEXTDLGCTL}, 0, 0);
      end;   
  end;
  //============================================================================
  procedure dbeJournal_OnEnter(Sender :TObject);
  begin
    TDBEditEh(Sender).Text := '';
  end;
  //============================================================================
  procedure evDoc_OnEventAlert(Sender :TObject; EventName: string; EventCount: LongInt; var CancelAlerts: Boolean);
  begin
    // RefreshView; 
    CancelAlerts := false;
  end;
  //============================================================================
  procedure DocForm_OnClose(Sender :TObject; var Action :TCloseAction);
  begin
    Action := caFree;
    if evDoc.Registered then evDoc.UnRegisterEvents; 
    AutoFree; 
  end; 
  //============================================================================
  function DocForm_Create:TAmunhotepForm;
  var
    lkFileName :string;
    lkResBody  :string;
    lkStrm     :TMemoryStream;
    lkLbl      :TLabel;
    lkAct      :TAction;
    lkTS       :TTabSheet;
    lkPM       :TPopupMenu;
    lkMM       :TMainMenu;
    lkCol      :TColumnEh;
    i          :Integer;
  begin
    DontAutoFree;
    lkFileName := StrAbsolutePath('./EDIT.XFM', ScriptName);
    lkResBody  := StringsLoadFromFile(lkFileName);
    if(lkResBody = '')then 
      begin
      Dialogs.MessageDlg(msg_invalid_resource+#13#10+lkFileName, mtWarning, [mbOK]);
      exit;
      end;
    Result             := TAmunhotepForm(StrToComponent(lkResBody));
    Result.OnClose     := @DocForm_OnClose;
    Result.HelpKeyWord := J_ID;
    //Result.FileName := lkFileName;
    try
      lkStrm := TMemoryStream.Create;
      if StreamLoadFromFile( PrepareAbsoleteFileName(ERP_ObjectIcon(ERP_OBJECTTYPE_DOC)), lkStrm)then
        Result.Icon.LoadFromStream(lkStrm);
    finally
     lkStrm.Free;
    end;
    Result.SetCaption(msg_caption);
    TopBar := TxcGradientPanelVista(Result.FindComponent('TopBar')); 
    with TopBar do 
      begin 
      Caption    := #$20#$20#$20#$20#$20#$20+msg_caption; 
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Window; 
      Font.Name  := 'Verdana'; 
      Font.Size  := 14; 
      Font.Style := [fsBold]; 
      StyleManager          := nil;
      Colors.HotTrack       := ERP_ObjectColorLight(ERP_OBJECTTYPE_DOC);
      Colors.HotTrackBorder := ERP_ObjectColor(ERP_OBJECTTYPE_DOC);
      end; 
    ImgLogo := TImage(Result.FindComponent('ImgLogo')); 
    try 
      lkStrm  := TMemoryStream.Create; 
      if StreamLoadFromFile(PrepareAbsoleteFileName(ERP_ObjectBitmap(ERP_OBJECTTYPE_DOC)), lkStrm)then 
        ImgLogo.Picture.Bitmap.LoadFromStream(lkStrm); 
    finally 
      lkStrm.Free; 
    end; 
    ToolBar         := TxcGradientPanelVista(Result.FindComponent('ToolBar'));
    PanelClient     := TxcGradientPanel(Result.FindComponent('PanelClient'));
    PanelClient.StyleManager := nil;
    PCDoc           := TxcPageControlEx(Result.FindComponent('PCDoc'));
    tsData          := TxcTabSheet(Result.FindComponent('tsData'));
    tsWrk           := TxcTabSheet(Result.FindComponent('tsWrk'));
    PanelToolBarDoc := TxcGradientPanelVista(Result.FindComponent('PanelToolBarDoc'));
    PanelToolBarWrk := TxcGradientPanelVista(Result.FindComponent('PanelToolBarWrk'));
    lkLbl := TLabel(Result.FindComponent('lblDate'));       lkLbl.Caption := msg_lbldate ;
    lkLbl := TLabel(Result.FindComponent('lblNAME'));       lkLbl.Caption := msg_lblname ;
    lkLbl := TLabel(Result.FindComponent('lblCS'));         lkLbl.Caption := msg_lblcs ;
    lkLbl := TLabel(Result.FindComponent('lblPlace'));      lkLbl.Caption := msg_lblplace ;
    lkLbl := TLabel(Result.FindComponent('lblWrk'));        lkLbl.Caption := msg_lblwrk ;
    lkLbl := TLabel(Result.FindComponent('lblFilial'));     lkLbl.Caption := msg_lblfilial ;
    lkLbl := TLabel(Result.FindComponent('lblUser'));       lkLbl.Caption := msg_lbluser ;
    lkLbl := TLabel(Result.FindComponent('lblID'));         lkLbl.Caption := msg_lblid ;
    lkLbl := TLabel(Result.FindComponent('lblNumber'));     lkLbl.Caption := msg_lblnumber ;
    lkLbl := TLabel(Result.FindComponent('lblNumberFull')); lkLbl.Caption := msg_lblnumberfull ;
    lkLbl := TLabel(Result.FindComponent('lblNumberIn'));   lkLbl.Caption := msg_lblnumberin ;
    lkLbl := TLabel(Result.FindComponent('lblFirm'));       lkLbl.Caption := msg_lblfirm ;
    lkLbl := TLabel(Result.FindComponent('lblUserWrk'));    lkLbl.Caption := msg_lbluserwrk ;
    lkLbl := TLabel(Result.FindComponent('lblDateIn'));     lkLbl.Caption := msg_lbldatein ;
    lkLbl := TLabel(Result.FindComponent('lblKM'));         lkLbl.Caption := msg_lblKM ;
    dbeNAME := TDBEditEh(Result.FindComponent('dbeNAME'));
    with dbeNAME do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeID := TDBEditEh(Result.FindComponent('dbeID'));
    with dbeID do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      OnKeyDown  := @dbeJournalRO_OnKeyDown;
      end; 
    dbeDOCNUMBER := TDBEditEh(Result.FindComponent('dbeDOCNUMBER'));
    with dbeDOCNUMBER do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN007.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        Hint    := 'Генерировать номер документа';
        OnClick := @dbeDOCNUMBER_OnEditButtonClick;
        end;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeDOCNUMBERSTR := TDBEditEh(Result.FindComponent('dbeDOCNUMBERSTR'));
    with dbeDOCNUMBERSTR do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      OnKeyDown  := @dbeJournalRO_OnKeyDown;
      end; 
    dbdtpDATE_IN := TDBDateTimeEditEh(Result.FindComponent('dbdtpDATE_IN'));
    with dbdtpDATE_IN do 
      begin 
      Color      := $FFFFE0;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeDOCNUMBERIN := TDBEditEh(Result.FindComponent('dbeDOCNUMBERIN'));
    with dbeDOCNUMBERIN do 
      begin 
      Color      := $FFFFE0;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeFIRM_ID_ := TDBEditEh(Result.FindComponent('dbeFIRM_ID_'));
    with dbeFIRM_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeFILIAL_ID_  := TDBEditEh(Result.FindComponent('dbeFILIAL_ID_'));
    with dbeFILIAL_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeFILIAL_ID__OnEditButtonClick;
        end;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeUSER_ID := TDBEditEh(Result.FindComponent('dbeUSER_ID'));
    with dbeUSER_ID do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeUSER_ID_OnEditButtonClick;
        end;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end;
    dbeWRK_NAME := TDBEditEh(Result.FindComponent('dbeWRK_NAME'));
    with dbeWRK_NAME do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      OnKeyDown  := @dbeJournalRO_OnKeyDown;
      end; 
    dbeCS_ID_                               := TDBEditEh(Result.FindComponent('dbeCS_ID_'));
    with dbeCS_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN005.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeCS_ID_Edit_OnEditButtonClick;
        end;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbePLACE_ID_                            := TDBEditEh(Result.FindComponent('dbePLACE_ID_'));
    with dbePLACE_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbePLACE_ID__OnEditButtonClick;
        end;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeTMC_ID_                              := TDBEditEh(Result.FindComponent('dbeTMC_ID_'));
    with dbeTMC_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeTMC_ID__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN005.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeTMC_ID_Edit_OnButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN004.BMP'));
        Style   := ebsGlyphEh;
        Hint    := 'Создать';
        Visible := true;
        OnClick := @dbeTMC_ID_Create_OnButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeTMC_ID_Clear_OnEditButtonClick;
        end;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      end; 
    dbeKM := TDBEditEh(Result.FindComponent('dbeKM'));
    with dbeKM do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      OnKeyDown  := @dbeJournalRW_OnKeyDown;
      OnEnter    := @dbeJournal_OnEnter;
      end; 
    dbeKM_WAS := TDBEditEh(Result.FindComponent('dbeKM_WAS'));
    with dbeKM_WAS do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := True;
      OnKeyDown  := @dbeJournalRO_OnKeyDown;
      end; 
    dbeKM_GONE := TDBEditEh(Result.FindComponent('dbeKM_GONE'));
    with dbeKM_GONE do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := True;
      OnKeyDown  := @dbeJournalRO_OnKeyDown;
      end; 
    dbeDOCSUMLEFT := TDBEditEh(Result.FindComponent('dbeDOCSUMLEFT'));
    with dbeDOCSUMLEFT do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := True;
      OnKeyDown  := @dbeJournalRO_OnKeyDown;
      end; 

    dbgDoc := TDBGridEh(Result.FindComponent('dbgDoc'));
    with dbgDoc do 
      begin 
      Color             := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color        := Amunhotep.MainForm.StyleManager.Colors.Border;
      FixedColor        := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      TitleFont.Color   := Amunhotep.MainForm.StyleManager.Colors.Border;
      TitleFont.Style   := [fsBold];
      SumList.Active    := true; 
      Options           := Options + [dgMultiSelect, dgAlwaysShowSelection];
      OptionsEh         := OptionsEh + [dghFixed3D,dghFooter3D,dghHighlightFocus,dghDialogFind,dghColumnResize,dghColumnMove,dghExtendVertLines];
      IndicatorOptions  := [gioShowRowIndicatorEh, gioShowRowselCheckboxesEh];  
      UseMultiTitle     := true;
      DrawMemoText      := true; 
      FrozenCols        := 0; 
      FooterRowCount    := 1; 
      VTitleMargin      := 2;
      OnGetCellParams   := @dbgDoc_OnGetCellParams;
      AllowedOperations := [alopUpdateEh, alopDeleteEh];
      Columns.Clear;
      lkCol := CreateTColumnEh(dbgDoc, 'I', '#0', '№ записи|№', 24, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := lkCol.Color;
        end;
      {  
      lkCol := CreateTColumnEh(dbgDoc, 'ID', '#0', '№ записи|код', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := lkCol.Color;
        end;
      }
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_ID'  , '#0 ', 'ТМЦ|Код', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_TYPE_IMAGE_INDEX', '', 'ТМЦ|Тип', 16, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos      := 1;
        Color             := Amunhotep.MainForm.StyleManager.Colors.Foreground + $202020;
        ReadOnly          := true;
        Footer.Color      := FixedColor + $202020;
//        KeyList.Text      := '0'+SQLCRLF+'1';
//        PickList.Text     := 'ТМЦ'+SQLCRLF+'ТехКарта';
        NotInKeyListIndex := 13;
        ImageList         := Amunhotep.MainForm.ImageListMain;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_TYPE_NAME', '', 'ТМЦ|Тип', 72, taLeftJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_NAME', '', 'ТМЦ|Наименование', 160, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos         := 0;
        Color                := FixedColor + $202020;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taLeftJustify;
        Footer.Value         := 'ИТОГО';
        Footer.ValueType     := fvtStaticText;
{
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Удалить позицию из документа ?';
          Visible := true;
          OnClick := @dbgDoc_TMC_NAME_Delete_OnClick;
          end;
}
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_ARTICLE', '', 'ТМЦ|Артикул', 60, taLeftJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        InRowLinePos := 1;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'PRICE_TMC', '#0.00', 'ТМЦ|внутр. цена',  60, taRightJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TMC_EDIZM_SHORT', '', 'ТМЦ|Ед.', 24, taLeftJustify);
      with lkCol do
        begin
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'QUANT'   , '#0.000', 'Документ|кол',  80, taRightJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := True;
        Color                := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly             := false;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.000';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'PRICE'   , '#0.00', 'Документ|Цена',  80, taRightJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := True;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TOTAL'   , '#0.00', 'Документ|Сумма' ,  80, taRightJustify);
      with lkCol do
        begin
        Color                := FixedColor + $202020;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc,'NAME'     , ''          ,'Документ|Примечания'                 ,200,taLeftJustify);
      with lkCol do
        begin
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        end;
      end; 
    dbgWrk := TDBGridEh(Result.FindComponent('dbgWrk'));
    with dbgWrk do 
      begin 
      Color             := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color        := Amunhotep.MainForm.StyleManager.Colors.Border;
      FixedColor        := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      TitleFont.Color   := Amunhotep.MainForm.StyleManager.Colors.Border;
      TitleFont.Style   := [fsBold];
      SumList.Active    := true; 
      Options           := Options + [dgMultiSelect, dgAlwaysShowSelection];
      OptionsEh         := OptionsEh + [dghFixed3D,dghFooter3D,dghHighlightFocus,dghDialogFind,dghColumnResize,dghColumnMove,dghExtendVertLines];
      IndicatorOptions  := [gioShowRowIndicatorEh, gioShowRowselCheckboxesEh];  
      UseMultiTitle     := true;
      DrawMemoText      := true; 
      FrozenCols        := 0; 
      FooterRowCount    := 1; 
      VTitleMargin      := 2;
      AllowedOperations := [alopUpdateEh, alopDeleteEh];
      OnGetCellParams   := @dbgWrk_OnGetCellParams;
      Columns.Clear; 
      lkCol := CreateTColumnEh(dbgWrk, 'ID', '#0', '№ записи|код', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := lkCol.Color;
        end;
      lkCol := CreateTColumnEh(dbgWrk, 'WRK_ID'  , '#0 ', 'Сотрудник|Код', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor + $202020;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgWrk, 'WRK_NAME', '', 'Сотрудник|Ф.И.О.', 160, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos         := 0;
        Color                := FixedColor + $202020;
        ReadOnly             := true;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taLeftJustify;
        Footer.Value         := 'ИТОГО';
        Footer.ValueType     := fvtStaticText;
        end;
      lkCol := CreateTColumnEh(dbgWrk, 'WRK_PC'   , '#0.00', 'Документ|% выполнения',  80, taRightJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := True;
        Color                := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly             := false;
        Footer.Color         := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgWrk,'NAME', '','Документ|Примечания',320,taLeftJustify);
      with lkCol do
        begin
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        end;
      end; 
    trJournal := TxFBTransaction(Result.FindComponent('trJournal'));
    with trJournal do 
      begin 
      DefaultDataBase := FBDataBase; 
      Params.Clear; 
      Params.Add('isc_tpb_read_committed'); 
      Params.Add('isc_tpb_write'); 
      Params.Add('isc_tpb_rec_version'); 
      Params.Add('isc_tpb_nowait'); 
      end; 
    dtsJournal := TxFBDataSet(Result.FindComponent('dtsJournal'));
    with dtsJournal do
      begin 
      AfterOpen   := @dtsJournal_AfterOpen;
      BeforeClose := @dtsJournal_BeforeClose;
      AfterScroll := @dtsJournal_AfterScroll;
      SelectSQL.Text  := StringsLoadFromFile( StrAbsolutePath('../1000153/EDIT_J1000153.SQL', ScriptName) );
      RefreshSQL.Text := StringsLoadFromFile( StrAbsolutePath('../1000153/EDIT_J1000153.SQL', ScriptName) );
      ModifySQL.Text  := 
        'EXECUTE BLOCK ( '+SQLCRLF+
        '  QID              DOMN$PSTRING  = ?ID '+SQLCRLF+
        ' ,QNAME            DOMN$PSTRING  = ?NAME '+SQLCRLF+
        ' ,QDATE_COMMIT     DOMN$DATETIME = ?DATE_COMMIT '+SQLCRLF+
        ' ,QDATE_IN         DOMN$DATETIME = ?DATE_IN '+SQLCRLF+
        ' ,QDOCNUMBER       DOMN$INTEGER  = ?DOCNUMBER '+SQLCRLF+
        ' ,QDOCNUMBERIN     DOMN$PSTRING  = ?DOCNUMBERIN '+SQLCRLF+
        ' ,QKM              DOMN$FLOAT    = ?KM '+SQLCRLF+
        ')AS'+SQLCRLF+
        'BEGIN '+SQLCRLF+
        '  UPDATE TABL$J_4 J SET '+SQLCRLF+
        '     J.NAME        = :QNAME '+SQLCRLF+
        '    ,J.DATE_COMMIT = :QDATE_COMMIT '+SQLCRLF+
        '    ,J.DATE_IN     = :QDATE_IN '+SQLCRLF+
        '    ,J.DOCNUMBER   = :QDOCNUMBER '+SQLCRLF+
        '    ,J.DOCNUMBERIN = :QDOCNUMBERIN '+SQLCRLF+
        '  WHERE (J.ID = :QID); '+SQLCRLF+
        '  '+SQLCRLF+
        '  UPDATE TABL$J_1000153 J1 SET '+SQLCRLF+
        '     J1.KM        = :QKM '+SQLCRLF+
        '  WHERE (J1.J_ID = :QID); '+SQLCRLF+
        'END ';
      end; 
    dtsDoc := TxFBDataSet(Result.FindComponent('dtsDoc'));
    with dtsDoc do
      begin 
      AfterOpen   := @dtsDoc_AfterOpen;
      BeforeClose := @dtsDoc_BeforeClose;
      AfterScroll := @dtsDoc_AfterScroll;
      SelectSQL.Text  := StringsLoadFromFile( StrAbsolutePath('../1000014/EDIT_D1000014S.SQL', ScriptName) );
      RefreshSQL.Text := StringsLoadFromFile( StrAbsolutePath('../1000014/EDIT_D1000014R.SQL', ScriptName) );
      ModifySQL.Text := 
        'UPDATE TABL$D_1000014 DB SET '+SQLCRLF+     
        '   DB.TMC_ID      = ?TMC_ID '+SQLCRLF+
        '  ,DB.QUANT       = ?QUANT '+SQLCRLF+
        '  ,DB.PRICE       = ?PRICE '+SQLCRLF+
        '  ,DB.ENTRYDATE   = ?ENTRYDATE '+SQLCRLF+
        '  ,DB.ENTRYBILL   = ?ENTRYBILL '+SQLCRLF+
        '  ,DB.NAME        = ?NAME '+SQLCRLF+
        'WHERE  (DB.ID = ?ID) ';    
      DeleteSQL.Text := 'DELETE FROM TABL$D_1000014 B WHERE (B.ID = ?ID) ';
      end 
    dtsWrk := TxFBDataSet(Result.FindComponent('dtsWrk'));
    with dtsWrk do
      begin 
      AfterOpen       := @dtsWrk_AfterOpen;
      BeforeClose     := @dtsWrk_BeforeClose;
      AfterScroll     := @dtsWrk_AfterScroll;
      SelectSQL.Text  := 
        'SELECT D.J_ID, D.ID, D.NAME, D.FLAG_DELETE, D.WRK_ID, D.WRK_PC '+SQLCRLF+
        '      ,(SELECT FIRST 1 COALESCE(W.NAME, '''') FROM TABL$R_WRK W WHERE (W.ID = D.WRK_ID)) AS WRK_NAME '+SQLCRLF+
        'FROM   TABL$D_1000153WRK D '+SQLCRLF+
        'WHERE  (D.J_ID = ?J_ID) '+SQLCRLF+
        'ORDER BY D.ID ';
      RefreshSQL.Text  := 
        'SELECT D.J_ID, D.ID, D.NAME, D.FLAG_DELETE, D.WRK_ID, D.WRK_PC '+SQLCRLF+
        '      ,(SELECT FIRST 1 COALESCE(W.NAME, '''') FROM TABL$R_WRK W WHERE (W.ID = D.WRK_ID)) AS WRK_NAME '+SQLCRLF+
        'FROM   TABL$D_1000153WRK D '+SQLCRLF+
        'WHERE  (D.ID = ?ID) '+SQLCRLF+
        'ORDER BY D.ID ';
      ModifySQL.Text := 
        'UPDATE TABL$D_1000153WRK DB SET '+SQLCRLF+     
        '   DB.NAME      = ?NAME '+SQLCRLF+
        '  ,DB.WRK_PC    = ?WRK_PC '+SQLCRLF+
        'WHERE  (DB.ID = ?ID) ';    
      DeleteSQL.Text := 'DELETE FROM TABL$D_1000153WRK B WHERE (B.ID = ?ID) ';
      end 
    DSdtsJournal := TDataSource(Result.FindComponent('DSdtsJournal'));
    DSdtsDoc     := TDataSource(Result.FindComponent('DSdtsDoc'));
    DSdtsWrk     := TDataSource(Result.FindComponent('DSdtsWrk'));
    lkAct := FindTAction(Result,'actRefresh'   ,msg_actrefresh   ,msg_actrefresh_hint   ,'F5'    , 0,170); lkAct.OnExecute:=@actRefresh_OnExecute;  
    lkAct := FindTAction(Result,'actPrint'     ,msg_actprint     ,msg_actprint_hint     ,'Ctrl+P', 0,105); lkAct.OnExecute:=@actPrint_OnExecute;    lkAct.OnUpdate:=@actPrint_OnUpdate; 
    lkAct := FindTAction(Result,'actCommit'    ,msg_actcommit    ,msg_actcommit_hint    ,'Ctrl+C', 0,298); lkAct.OnExecute:=@actCommit_OnExecute;   lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actUnCommit'  ,msg_actuncommit  ,msg_actuncommit_hint  ,'Ctrl+U', 0,297); lkAct.OnExecute:=@actUnCommit_OnExecute; lkAct.OnUpdate:=@actUnCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actDocAdd'    ,msg_actdocadd    ,msg_actdocadd_hint    ,''      , 0,312); lkAct.OnExecute:=@actDocAdd_OnExecute;   lkAct.OnUpdate:=@actDocAdd_OnUpdate; 
    lkAct := FindTAction(Result,'actDocDel'    ,msg_actdocdel    ,msg_actdocdel_hint    ,''      , 0,314); lkAct.OnExecute:=@actDocDel_OnExecute;   lkAct.OnUpdate:=@actDocDel_OnUpdate; 
    lkAct := FindTAction(Result,'actWrkAdd'    ,msg_actwrkadd    ,msg_actwrkadd_hint    ,''      , 0,521); lkAct.OnExecute:=@actWrkAdd_OnExecute;   lkAct.OnUpdate:=@actWrkAdd_OnUpdate; 
    lkAct := FindTAction(Result,'actWrkDel'    ,msg_actwrkdel    ,msg_actwrkdel_hint    ,''      , 0,523); lkAct.OnExecute:=@actWrkDel_OnExecute;   lkAct.OnUpdate:=@actWrkDel_OnUpdate; 
    lkAct := FindTAction(Result,'actJNewAddPay',msg_actJNewAddPay,msg_actJNewAddPay_hint,'F3'    , 0,301); lkAct.OnExecute:=@actJNewAddPay_OnExecute;  

    evDoc := TxFBEvents(Result.FindComponent('evDoc'));
    with evDoc do
      begin 
      Events.Clear;
      Events.Add('TABL$J_4');
      OnEventAlert := @evDoc_OnEventAlert;
      end; 
    if not evDoc.Registered then evDoc.RegisterEvents; 
    RefreshView;
    Amunhotep.MainForm.TaskBar.ButtonByForm(Result).Down := true;
  end;
  //============================================================================
begin
  J_ID := GetGlobalVariable('J_ID');
  DocForm := DocForm_Create;
end.
