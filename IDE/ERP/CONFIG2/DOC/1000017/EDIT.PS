{$DEFINE PEAKTOP:IDE/ERP/CONFIG/DOC/1000014/EDIT.PS}
{$IFNDEF PEAKTOP:GLOBAL_VARIABLES.INC}        {$I PEAKTOP:GLOBAL_VARIABLES.INC}        {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOLUMNEH.INC}           {$I PEAKTOP:OBJ/TCOLUMNEH.INC}           {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOLUMNEH_KEYLST.INC}    {$I PEAKTOP:OBJ/TCOLUMNEH_KEYLST.INC}    {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TIMAGELIST.INC}          {$I PEAKTOP:OBJ/TIMAGELIST.INC}          {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TACTION.INC}             {$I PEAKTOP:OBJ/TACTION.INC}             {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/OBJECTNAMES.INC} {$I PEAKTOP:IDE/ERP/DBO/OBJECTNAMES.INC} {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}   {$I PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}   {$ENDIF}
  //============================================================================
  function DocForm_ExecSQLParams(const aTransactionParams:array of string; const aSQL:string; const aParamNames, aParamValues:array of string):Boolean;
  var
    i    :Integer;
    lkTr :TxFBTransaction;
    lkQr :TxFBQuery;
  begin
    Result := false;
    if not FBDataBase.Connected then exit;
    lkTr := TxFBTransaction.Create(nil);
    with lkTr do
      begin
      DefaultDataBase := FBDataBase;
      with Params do
        begin
        Clear;
        if(Length(aTransactionParams) > 0)then
          for i:=0 to Length(aTransactionParams)-1 do
            Add(aTransactionParams[i])
         else
          begin
          Add('isc_tpb_read_committed');
          Add('isc_tpb_write');
          Add('isc_tpb_rec_version');
          Add('isc_tpb_nowait');
          end;   
        end;
      end;
    lkQr := TxFBQuery.Create(lkTr);
    with lkQR do
      begin
      Transaction := lkTr;
      SQL.Text := aSQL;
      if(Length(aParamNames) > 0)then
        begin
        Prepare;
        for i:=0 to Length(aParamNames)-1 do
          ParamByName(aParamNames[i]).AsString := aParamValues[i]; 
        end;
      try
        ExecSQL;
      except
        if lkTr.InTransaction then
          lkTr.Rollback;
        lkTr.Free;
        exit;    
      end;  
      end;
    if lkTr.InTransaction then
      lkTr.Commit;
    lkTr.Free;    
    Result := true;
  end;
  //============================================================================
  function DocForm_ExecSQL(const aTransactionParams:array of string; const aSQL:string):Boolean;
  begin
    Result := DocForm_ExecSQLParams(aTransactionParams, aSQL, [], []);
  end;
  //============================================================================
const
  msg_invalid_resource       = 'Неверный файл ресурсов'; 
  msg_lblid                  = 'Код'; 
  msg_lblnumber              = 'Номер'; 
  msg_lblnumberfull          = 'Полный номер'; 
  msg_lblnumberin            = 'Входящий номер'; 
  msg_lbldate                = 'Дата'; 
  msg_lblname                = 'Примечание к документу'; 
  msg_lblfirm                = 'Фирма'; 
  msg_lblfilial              = 'Филиал'; 
  msg_lbluser                = 'Пользователь'; 
  msg_lbluserwrk             = 'Сотрудник'; 
  msg_actrefresh             = 'Обновить'; 
  msg_actrefresh_hint        = 'Сохранить и обновить документ'; 
  msg_actprint               = 'Печать'; 
  msg_actprint_hint          = 'Печать документа'; 
  msg_actcommit              = 'Провести'; 
  msg_actcommit_hint         = 'Провести документ'; 
  msg_actuncommit            = 'Отменить'; 
  msg_actuncommit_hint       = 'Отменить проведение докумнта'; 
  msg_actdocdelete           = 'Удалить'; 
  msg_actdocdelete_hint      = 'Удалить позицию из документа'; 
  msg_actdocinsert           = 'Добавить'; 
  msg_actdocinsert_hint      = 'Добавить позицию в документ'; 
  msg_actdoc6611             = 'Авансы'; 
  msg_actdoc6611_hint        = 'Заполнить документ авансами сотрудникам'; 
  msg_actdoc661              = 'Зарплата'; 
  msg_actdoc661_hint         = 'Заполнить документ суммами к выплате сотрудникам'; 
var 
  DocForm             :TAmunhotepForm; 
  TopBar              :TxcGradientPanelVista; 
  ImageLogo           :TImage; 
  ToolBar             :TxcGradientPanelVista; 
  PanelDoc            :TxcPanel; 
  PanelClient         :TxcGradientPanel; 
  PanelToolBarDoc     :TxcGradientPanelVista; 
  dbeID               :TDBEditEh; 
  dbeDOCNUMBER        :TDBEditEh; 
  dbeDOCNUMBERSTR     :TDBEditEh; 
  dbeDOCNUMBERIN      :TDBEditEh; 
  dbeNAME             :TDBEditEh; 
  dbdtpDATE_COMMIT    :TDBDateTimeEditEh; 
  dbeFILIAL_ID_       :TDBEditEh; 
  dbeUSER_ID          :TDBEditEh; 
  dbeFIRM_ID_         :TDBEditEh; 
  dbeWRK_NAME         :TDBEditEh; 
  dbePAYSRC_ID_       :TDBEditEh; 
  dbePAYSRC_ID_NDP_   :TDBEditEh; 
  dbgDoc              :TDBGridEh; 
  trJournal           :TxFBTransaction; 
  dtsJournal          :TxFBDataSet; 
  dtsDoc              :TxFBDataSet; 
  DSdtsJournal        :TDataSource; 
  DSdtsDoc            :TDataSource; 
  evDoc               :TxFBEvents; 
  //============================================================================
  procedure CloseDataSets;
  begin
    if(dtsJournal.State = dsEdit)then
      try
        dtsJournal.Post;
      except
        dtsJournal.Cancel;
      end;
    if trJournal.InTransaction then 
      trJournal.Commit; 
  end;
  //============================================================================
  procedure RefreshView;
  begin 
    CloseDataSets;
    dtsJournal.Prepare;
    dtsJournal.ParamByName('ID').AsString := DocForm.HelpKeyWord; 
    try 
      dtsJournal.Open;
    except 
      // Dialogs.MessageDlg(dtsJournal.SelectSQL.Text, mtError, [mbOk]);
    end; 
  end;
  //============================================================================
  procedure RefreshDetail;
  begin
    if dtsDoc.Active then dtsDoc.Close;
    try dtsDoc.Open; except end; 
  end;
  //============================================================================
  procedure dbePAYSRC_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
    lkScript       :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'PAYSRC_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('PAYSRC_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    lkScript := 
      '{$IFNDEF PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}  {$I PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}{$ENDIF} '+SQLCRLF+
      'begin '+SQLCRLF+
      '  TERPFormGrid_DataSetFilter_Add(''FIRM_ID'', ''FIRM_ID = '''''+dtsJournal.FieldByName('FIRM_ID').AsString+''''' ''); '+SQLCRLF+ 
      '  Reference_Execute(''TABL$R_PAYSRC''); '+SQLCRLF+
      'end. '+SQLCRLF;
    run(lkScript, 'PEAKTOP:IDE/ERP/CONFIG2/REF/PAYSRC/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000017 TB SET TB.PAYSRC_ID = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbePAYSRC_ID_NDP__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
    lkScript       :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'PAYSRC_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('PAYSRC_ID_NDP').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    lkScript := 
      '{$IFNDEF PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}  {$I PEAKTOP:IDE/ERP/DBO/REF/FORMREF.INC}{$ENDIF} '+SQLCRLF+
      'begin '+SQLCRLF+
      '  TERPFormGrid_DataSetFilter_Add(''FIRM_ID'', ''FIRM_ID = '''''+dtsJournal.FieldByName('FIRM_ID').AsString+''''' ''); '+SQLCRLF+ 
      '  Reference_Execute(''TABL$R_PAYSRC''); '+SQLCRLF+
      'end. '+SQLCRLF;
    run(lkScript, 'PEAKTOP:IDE/ERP/CONFIG2/REF/PAYSRC/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_1000017 TB SET TB.PAYSRC_ID_NDP = '''+lkBUFFER_ID+''' WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbePAYSRC_ID_NDP_Clear_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkSQL :string;
  begin
    Handled := true; 
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkSQL := 'UPDATE TABL$J_1000017 TB SET TB.PAYSRC_ID_NDP = 0 WHERE(TB.J_ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeFILIAL_ID__OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'FILIAL_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('FILIAL_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/FILIALS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_4 TB SET TB.FILIAL_ID = '''+lkBUFFER_ID+''' WHERE(TB.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeUSER_ID_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkSQL          :string;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkVariableName := 'USER_ID';
    lkBUFFER_ID := dtsJournal.FieldByName('USER_ID').AsString;
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/_USERS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkSQL := 'UPDATE TABL$J_4 TB SET TB.USER_ID = '''+lkBUFFER_ID+''' WHERE(TB.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure dbeDOCNUMBER_OnEditButtonClick(Sender :TObject; var Handled : Boolean);
  var
    lkNumber :string;
    lkTr     :TxFBTransaction;
    lkQr     :TxFBQuery;
  begin
    Handled := true;
    if not dtsJournal.Active then exit;
    if not(dtsJournal.RecordCount>0)then exit; 
    lkNumber := '';
    lkTr := TxFBTransaction.Create(nil);
    with lkTr do
      begin
      DefaultDataBase := dtsJournal.DataBase;
      with Params do
        begin
        Clear;
          Add('isc_tpb_read_committed');
          Add('isc_tpb_write');
          Add('isc_tpb_rec_version');
          Add('isc_tpb_nowait');
        end;
      end;
    lkQr := TxFBQuery.Create(lkTr);
    with lkQr do
      begin
      Transaction := lkTr;
      SQL.Text := 'SELECT FIRST 1 P.NEW_NUMBER FROM PROC$J_GEN_4('+dtsJournal.FieldByName('TYPE_ID').AsString+', '+dtsJournal.FieldByName('FIRM_ID').AsString+') P ';
      try
        Open;
      except 
        if lkTr.InTransaction then lkTr.Rollback;
        lkTr.Free;
        exit;
      end;
      if Active then
        begin
        First;
        lkNumber := FieldByName('NEW_NUMBER').AsString;
        end;
      end;
    if lkTr.InTransaction then 
      lkTr.Commit;
    lkTr.Free;
    lkNumber := StrCiphersOnlyInt(lkNumber);
    if(StrTrimAll(lkNumber) = '')then exit;
    with dtsJournal do
      begin
      Edit;
      FieldByName('DOCNUMBER').AsString := lkNumber;
      try Post; except Cancel end;
      end;
  end;
  //============================================================================
  procedure dbgDoc_ACC_ID_Edit_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
  begin
    Handled := true;
    lkVariableName := 'ACC_ID';
    lkBUFFER_ID := dtsDoc.FieldByName('ACC_ID').AsString;
    if(StrTrimAll(lkBUFFER_ID) = '')then lkBUFFER_ID := '0';
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/BUHG_ACCS/DEFAULT_DLG0.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    if(dtsDoc.State = dsBrowse)then
      dtsDoc.Edit;
    dtsDoc.FieldByName('ACC_ID').AsString := lkBUFFER_ID;  
    dtsDoc.FieldByName('SUBKONTO_ID'  ).AsString := '0';  
    dtsDoc.FieldByName('SUBKONTO_NAME').AsString := '';  
  end; 
  //============================================================================
  procedure dbgDoc_SUBKONTO_NAME_Edit_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkObjectId     :string;
    lkScriptName   :string;
    lkVariableName :string;
    lkBUFFER_ID    :string;
  begin
    Handled := true;
    lkObjectId   := '';
    GetField(dtsDoc.DataBase, 'TABL$R_BUHG_ACCS', 'SUBKONTO', ' ID = '+dtsDoc.FieldByName('ACC_ID').AsString, lkObjectId);
    lkObjectId := StrTrimAll(lkObjectId);
    if(lkObjectId = '')then
      begin
      Dialogs.MessageDlg('У счета нет субконто.', mtInformation, [mbOk]);
      exit;
      end;
    lkScriptName := '';
    GetField(dtsDoc.DataBase, 'TABL$_TB', 'SC_REF_DLG','ID = '''+lkObjectId+''' ', lkScriptName);
    if(StrTrimAll(lkScriptName) = '')then exit;
    GetField(dtsDoc.DataBase, 'TABL$_TB', 'BUFFER_VAR','ID = '''+lkObjectId+''' ', lkVariableName);
    lkBUFFER_ID := dtsDoc.FieldByName('SUBKONTO_ID').AsString;
    if(StrTrimAll(lkBUFFER_ID) = '')then lkBUFFER_ID := '0';
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    if not call(lkScriptName) then exit;
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    if(dtsDoc.State = dsBrowse)then
      dtsDoc.Edit;
    dtsDoc.FieldByName('SUBKONTO_ID').AsString := lkBUFFER_ID;

    lkScriptName := '';
    GetField(dtsDoc.DataBase, lkObjectId, 'NAME','ID = '''+lkBUFFER_ID+''' ', lkScriptName);
    dtsDoc.FieldByName('SUBKONTO_NAME').AsString := lkScriptName;  
  end; 
  //============================================================================
  procedure dbgDoc_EXPTYPE_NAME_Edit_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
  begin
    Handled := true;
    lkVariableName := 'EXPTYPE_ID';
    lkBUFFER_ID := dtsDoc.FieldByName('EXPTYPE_ID').AsString;
    if(StrTrimAll(lkBUFFER_ID) = '')then lkBUFFER_ID := '0';
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/EXPTYPES/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    if(dtsDoc.State = dsBrowse)then
      dtsDoc.Edit;
    dtsDoc.FieldByName('EXPTYPE_ID').AsString := lkBUFFER_ID;
    if GetField(dtsDoc.DataBase, 'TABL$R_EXPTYPES','NAME','ID='+lkBUFFER_ID, lkBUFFER_ID)then  
      dtsDoc.FieldByName('EXPTYPE_NAME').AsString := lkBUFFER_ID
     else
      dtsDoc.FieldByName('EXPTYPE_NAME').AsString := '';
  end; 
  //============================================================================
  procedure dbgDoc_FILIAL_NAME_Edit_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkBUFFER_ID    :string;
  begin
    Handled := true;
    lkVariableName := 'FILIAL_ID';
    lkBUFFER_ID := dtsDoc.FieldByName('FILIAL_ID').AsString;
    if(StrTrimAll(lkBUFFER_ID) = '')then lkBUFFER_ID := '0';
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    call('PEAKTOP:IDE/ERP/CONFIG2/REF/FILIALS/DEFAULT_DLG.PS');
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    if(dtsDoc.State = dsBrowse)then
      dtsDoc.Edit;
    dtsDoc.FieldByName('FILIAL_ID').AsString := lkBUFFER_ID;
    if GetField(dtsDoc.DataBase, 'TABL$R_FILIALS','NAME','ID='+lkBUFFER_ID, lkBUFFER_ID)then  
      dtsDoc.FieldByName('FILIAL_NAME').AsString := lkBUFFER_ID
     else
      dtsDoc.FieldByName('FILIAL_NAME').AsString := '';
  end; 
  //============================================================================
  procedure dbgDoc_J_REASON_DOCSTR_Edit_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkObjectId     :string;
    lkVariableName :string;
    lkBUFFER_ID    :string;
    lkTypeId       :string;
    lkScript       :string;
    lkSum          :string;
    lkNDP          :string;
  begin
    Handled := true;
    GetField(dtsDoc.DataBase, 'TABL$R_BUHG_ACCS', 'SUBKONTO', ' ID = '+dtsDoc.FieldByName('ACC_ID').AsString, lkObjectId);
    lkObjectId := StrTrimAll(lkObjectId);
    lkVariableName := 'J_ID';
    lkBUFFER_ID := dtsDoc.FieldByName('J_REASON_ID').AsString;
    if(StrTrimAll(lkBUFFER_ID) = '')then lkBUFFER_ID := '0';
    SetGlobalVariable(lkVariableName, lkBUFFER_ID);
    if(UpperCase(lkObjectId) = 'TABL$R_CS')then
      begin
      lkTypeId := '1000014';  
      lkScript := 
        '{$IFNDEF PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$I PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$ENDIF} '+SQLCRLF+
        'begin '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_DateInit := true; '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_DateFrom := StrToDate('''+FormatDateTime('dd.mm.yyyy',dtsJournal.FieldByName('DATE_COMMIT').AsDateTime - 60)+'''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_DateTo   := StrToDate('''+FormatDateTime('dd.mm.yyyy',dtsJournal.FieldByName('DATE_COMMIT').AsDateTime)+'''); '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_Add(''FIRM_ID'', ''FIRM_ID = '''''+dtsJournal.FieldByName('FIRM_ID').AsString+''''' ''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_Add(''CS_ID''  , ''CS_ID   = '''''+dtsDoc.FieldByName('SUBKONTO_ID').AsString+''''' ''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_Add(''TYPE_ID'', '' ''''~1000071~1000135~1000026~1000078~1000128~1000075~1000136~1000028~1000079~1000127~'''' CONTAINING ''''~''''||TYPE_ID||''''~'''' ''); '+SQLCRLF+ 
        '  Journal_Execute(''1000014''); '+SQLCRLF+
        'end. '+SQLCRLF;
      run(lkScript, 'PEAKTOP:IDE/ERP/CONFIG2/DOC/'+lkTypeId+'/DEFAULT_DLG.PS');
      end
     else if(UpperCase(lkObjectId) = 'TABL$R_WRK')then
      begin
      lkTypeId := '1000046';
      lkScript := 
        '{$IFNDEF PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$I PEAKTOP:IDE/ERP/DBO/DOC/FORMJRNL.INC} {$ENDIF} '+SQLCRLF+
        'begin '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_DateInit := true; '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_DateFrom := StrToDate(''01.11.2012''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_DateTo   := StrToDate('''+FormatDateTime('dd.mm.yyyy',dtsJournal.FieldByName('DATE_COMMIT').AsDateTime)+'''); '+SQLCRLF+
        '  TERPFormGrid_DataSetFilter_Add(''FIRM_ID''    , ''FIRM_ID = '''''+dtsJournal.FieldByName('FIRM_ID').AsString+''''' ''); '+SQLCRLF+ 
        '  TERPFormGrid_DataSetFilter_Add(''FLAG_DELETE'', ''EXISTS(SELECT D.ID FROM TABL$D_1000046 D WHERE (D.J_ID = R0000.ID)AND(D.WRK_ID = '''''+dtsDoc.FieldByName('SUBKONTO_ID').AsString+'''''))''); '+SQLCRLF+ 
        '  Journal_Execute('''+lkTypeId+'''); '+SQLCRLF+
        'end. '+SQLCRLF;
      run(lkScript, 'PEAKTOP:IDE/ERP/CONFIG2/DOC/'+lkTypeId+'/DEFAULT_DLG.PS');
      end;
    lkBUFFER_ID := GetGlobalVariable(lkVariableName);
    if( (UpperCase(lkBUFFER_ID)='NULL') or (StrTrimAll(lkBUFFER_ID)='') )then exit;
    lkScript := '';
    GetField(dtsDoc.DataBase, 'TABL$J_4', 'DOCSTR', '(ID = '''+lkBUFFER_ID+''')', lkScript);
    if(dtsDoc.State = dsBrowse)then
      dtsDoc.Edit;
    dtsDoc.FieldByName('J_REASON_ID'    ).AsString := lkBUFFER_ID; 
    dtsDoc.FieldByName('J_REASON_DOCSTR').AsString := lkScript;
    dtsDoc.FieldByName('J_REASON_SUM'   ).AsFloat  := 0;
    dtsDoc.FieldByName('J_REASON_NDP'   ).AsFloat  := 0;
    dtsDoc.FieldByName('J_REASON_CLEAR' ).AsFloat  := 0;
    lkScript := '0'; 
    GetField(dtsDoc.DataBase, 'TABL$J_4'      , 'COALESCE(DOCSUMVAL, 0)', '(ID =   '''+lkBUFFER_ID+''')', lkSum); WriteLn(lkBUFFER_ID+'.SUM='+lkSum);
    GetField(dtsDoc.DataBase, 'TABL$J_1000014', 'COALESCE(P_NDP    , 0)', '(J_ID = '''+lkBUFFER_ID+''')', lkNDP); WriteLn(lkBUFFER_ID+'.NDP='+lkSum);
    try 
      dtsDoc.FieldByName('J_REASON_SUM').AsFloat := StrToFloat( StrReplaceChar(lkSum, ',', '.') ); 
      dtsDoc.FieldByName('J_REASON_NDP').AsFloat := StrToFloat( StrReplaceChar(lkNDP, ',', '.') );
    except
      dtsDoc.FieldByName('J_REASON_SUM').AsFloat := 0;
      dtsDoc.FieldByName('J_REASON_NDP').AsFloat := 0;
    end;
    dtsDoc.FieldByName('J_REASON_CLEAR').AsFloat := dtsDoc.FieldByName('J_REASON_SUM').AsFloat - dtsDoc.FieldByName('J_REASON_NDP').AsFloat;
  end; 
  //============================================================================
  procedure dbgDoc_J_REASON_DOCSTR_Clear_OnClick(Sender :TObject; var Handled : Boolean);
  begin
    Handled := true; 
    if not dtsDoc.Active then exit;
    if not(dtsDoc.RecordCount>0)then exit; 
    if(dtsDoc.State = dsBrowse)then
      dtsDoc.Edit;
    dtsDoc.FieldByName('J_REASON_NDP'   ).AsString := '0';
    dtsDoc.FieldByName('J_REASON_SUM'   ).AsString := '0';
    dtsDoc.FieldByName('J_REASON_ID'    ).AsString := '0';  
    dtsDoc.FieldByName('J_REASON_DOCSTR').AsString := '';
    dtsDoc.FieldByName('SUBKONTO2_ID'   ).AsString := '0';  
  end;
  //============================================================================
  procedure dbgDoc_J_ID_LOAD_Edit_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkJ_ID         :string;
    lkTYPE_ID      :string;
  begin
    Handled := true;
    lkTYPE_ID := '';
    lkJ_ID := dtsDoc.FieldByName('J_ID_LOAD').AsString;
    if(lkJ_ID = '0')then exit;
    GetField(dtsDoc.DataBase, 'TABL$J_4', 'FIRST 1 TYPE_ID', 'ID='+lkJ_ID, lkTYPE_ID);
    if(StrTrimAll(lkTYPE_ID) = '')then exit;
    SetGlobalVariable('J_ID', lkJ_ID);
    call(StrAbsolutePath('../'+lkTYPE_ID+'/EDIT.PS', ScriptName));
  end; 
  //============================================================================
  procedure dbgDoc_J_ID_PAYMENT_Edit_OnClick(Sender :TObject; var Handled : Boolean);
  var
    lkVariableName :string;
    lkJ_ID         :string;
    lkTYPE_ID      :string;
  begin
    Handled := true;
    lkTYPE_ID := '';
    lkJ_ID := dtsDoc.FieldByName('J_ID_PAYMENT').AsString;
    if(lkJ_ID = '0')then exit;
    GetField(dtsDoc.DataBase, 'TABL$J_4', 'FIRST 1 TYPE_ID', 'ID ='+lkJ_ID, lkTYPE_ID);
    if(StrTrimAll(lkTYPE_ID) = '')then exit;
    SetGlobalVariable('J_ID', lkJ_ID);
    call(StrAbsolutePath('../'+lkTYPE_ID+'/EDIT.PS', ScriptName));
  end; 
  //============================================================================
  procedure dtsJournal_AfterOpen(DataSet :TDataSet);
  begin
    RefreshDetail;
  end;
  //============================================================================
  procedure dtsJournal_BeforeClose(DataSet :TDataSet);
  begin
    if dtsDoc.Active then
      begin
      if(dtsDoc.State <> dsBrowse)then
        try
          dtsDoc.Post;
        except
          dtsDoc.Cancel;
        end;
      dtsDoc.Close;  
      end;  
  end;
  //============================================================================
  procedure dtsJournal_AfterScroll(DataSet :TDataSet);
  begin
    DocForm.Caption := DataSet.FieldByName('TYPE_ID_').AsString+' '+DataSet.FieldByName('DOCNUMBERSTR').AsString;
    DocForm.SetCaption(DocForm.Caption);
    TopBar.Caption := #$20#$20#$20#$20#$20#$20+DocForm.Caption;
    PanelClient.Colors.Window := DataSet.FieldByName('COLOR_BGR').AsInteger;
    PanelClient.Font.Color    := DataSet.FieldByName('COLOR_FRG').AsInteger;
    dbgDoc.ReadOnly := (DataSet.FieldByName('FLAG_COMMIT').AsInteger = 1);
    PanelClient.Enabled := not dbgDoc.ReadOnly;
    if dbgDoc.ReadOnly then
      dbgDoc.Options := [dgRowSelect, dgAlwaysShowSelection,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs] 
     else
      dbgDoc.Options := [dgEditing,dgTitles,dgIndicator,dgColumnResize,dgColLines,dgRowLines,dgTabs,dgConfirmDelete,dgCancelOnExit]; 
  end;
  //============================================================================
  procedure dtsDoc_OnFieldChange(Sender: TField);
  begin
    if(  (Sender.FieldName = 'PAYSUM') or (Sender.FieldName = 'PAYSUMNDP'  ) 
       or(Sender.FieldName = 'TAX_ID')// or (Sender.FieldName = 'J_REASON_ID') 
    )then
      begin
      if(Sender.DataSet.State <> dsInsert)then
        RefreshView;
      exit;
      end;
    if(Sender.FieldName = 'FLAG_DEBET')then
      begin
      if(Sender.AsInteger = 1)then
        Sender.DataSet.FieldByName('ACC_ID').AsString := '1000062'
       else     
        Sender.DataSet.FieldByName('ACC_ID').AsString := '1000060';
      exit;  
      end;
  end;
  //============================================================================
  procedure dtsDoc_AfterOpen(DataSet :TDataSet);
  var
    i:Integer;
  begin
    for i:=0 to DataSet.Fields.Count-1 do
      if(  (DataSet.Fields[i].FieldName = 'PAYSUM')
         or(DataSet.Fields[i].FieldName = 'PAYSUMNDP')
         or(DataSet.Fields[i].FieldName = 'TAX_ID')
         or(DataSet.Fields[i].FieldName = 'J_REASON_ID')
         or(DataSet.Fields[i].FieldName = 'FLAG_DEBET')
         )then
        DataSet.Fields[i].OnChange := @dtsDoc_OnFieldChange;
    if(DataSet.Tag <> 0)then
      DataSet.RecNo := DataSet.Tag;
  end;
  //============================================================================
  procedure dtsDoc_BeforeClose(DataSet :TDataSet);
  begin
    DataSet.Tag := DataSet.RecNo;
  end;
  //============================================================================
  procedure dtsDoc_AfterScroll(DataSet :TDataSet);
  begin
  end;
  //============================================================================
  procedure dtsDoc_OnNewRecord(DataSet :TDataSet);
  var
    lkStr :string;
  begin
    if GetField(FBDataBase, 'RDB$DATABASE', 'GEN_ID(GENR$D_1000017_ID, 0)', '', lkStr)then
      DataSet.FieldByName('ID').AsString := IntToStr(StrToInt(lkStr) + dtsDoc.GeneratorField.IncrementBy);
    DataSet.FieldByName('J_ID').AsString := dtsJournal.FieldByName('ID').AsString;
    DataSet.FieldByName('FLAG_DELETE'    ).AsString := '0';   
    DataSet.FieldByName('FLAG_DEBET'     ).AsString := '1';   
    DataSet.FieldByName('NAME'           ).AsString := '';   
    DataSet.FieldByName('ACC_ID'         ).AsString := '361';    
    DataSet.FieldByName('ACC_CODE'       ).AsString := '361';    
    DataSet.FieldByName('SUBKONTO_ID'    ).AsString := '0';    
    DataSet.FieldByName('SUBKONTO_NAME'  ).AsString := '';  
    DataSet.FieldByName('TAX_ID'         ).AsString := '1000008';    
    DataSet.FieldByName('SUBTYPE_ID'     ).AsString := '0';    
    DataSet.FieldByName('EXPTYPE_ID'     ).AsString := '1000003';    
    DataSet.FieldByName('J_REASON_ID'    ).AsString := '0';
    DataSet.FieldByName('J_REASON_DOCSTR').AsString := ''; 
    DataSet.FieldByName('PAYSUM'         ).AsString := '0';   
    DataSet.FieldByName('PAYSUMCLEAR'    ).AsString := '0';   
    DataSet.FieldByName('PAYSUMNDP'      ).AsString := '0';   
    if GetField(dtsDoc.DataBase, 'TABL$R_EXPTYPES','NAME','ID='+DataSet.FieldByName('EXPTYPE_ID').AsString, lkStr)then  
      dtsDoc.FieldByName('EXPTYPE_NAME').AsString := lkStr;
    if GetField(dtsDoc.DataBase, 'TABL$R_CS','NDS_PAYED','ID = (SELECT FIRST 1 F.CS_ID FROM TABL$R_FIRMS F WHERE (F.ID = '+dtsJournal.FieldByName('FIRM_ID').AsString+'))', lkStr)then
      begin
      if(StrTrimAll(lkStr) = '1')then
        DataSet.FieldByName('TAX_ID').AsString := '1000010'
       else     
        DataSet.FieldByName('TAX_ID').AsString := '1000008';
      end;
  end;
  //============================================================================
  procedure actRefresh_OnExecute(Sender :TObject);
  begin
    RefreshView;
  end;
  //============================================================================
  procedure actPrint_OnExecute(Sender :TObject);
  var
    lkScName:string;
  begin
    if not dtsJournal.Active then exit;
    if(not(dtsJournal.RecordCount>0))then exit;
    lkScName := 'PEAKTOP:IDE/ERP/CONFIG2/DOC/'+dtsJournal.FieldByName('TYPE_ID').AsString+'/PRINT.PS';
    SetGlobalVariable('J_ID', dtsJournal.FieldByName('ID').AsString);
    if not call(lkScName)then
      Dialogs.MessageDlg('Ошибка в вызове скрипта '+SQLCRLF+lkScName, mtError, [mbOk]);
  end;
  //============================================================================
  procedure actPrint_OnUpdate(Sender :TObject);
  var
    lkEnabled :Boolean;
  begin
    lkEnabled := dtsJournal.Active;
    if(lkEnabled)then lkEnabled := (dtsJournal.RecordCount > 0);
    TCustomAction(Sender).Enabled := lkEnabled;
  end;
  //============================================================================
  procedure actCommit_OnExecute(Sender :TObject);
  var
    lkSQL :string;
  begin
    if not(Dialogs.MessageDlg('Провести документ ?', mtConfirmation, [mbYes, mbNo])=mrYes)then exit;
    lkSQL := 'UPDATE TABL$J_4 J SET J.FLAG_COMMIT = 1 WHERE (J.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actCommit_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger = 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actUnCommit_OnExecute(Sender :TObject);
  var
    lkSQL :string;
  begin
    if not(Dialogs.MessageDlg('Отменить проведение документа ?', mtConfirmation, [mbYes, mbNo])=mrYes)then exit;
    lkSQL := 'UPDATE TABL$J_4 J SET J.FLAG_COMMIT = 0 WHERE (J.ID = '''+dtsJournal.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actUnCommit_OnUpdate(Sender :TObject);
  var
    lk_Enabled :Boolean;
  begin
    lk_Enabled := dtsJournal.Active;
    if(lk_Enabled)then lk_Enabled := (dtsJournal.RecordCount>0);
    if(lk_Enabled)then lk_Enabled := (dtsJournal.FieldByName('FLAG_COMMIT').AsInteger <> 0);
    TCustomAction(Sender).Enabled := lk_Enabled;
  end;
  //============================================================================
  procedure actDocDelete_OnExecute(Sender :TObject);
  var
    lkSQL :string;
  begin    
    if not dtsDoc.Active then exit;  
    if not(dtsDoc.RecordCount>0)then exit;  
    if(Dialogs.MessageDlg('Удалить позицию из документа ?', mtConfirmation, [mbYes, mbNo]) <> mrYes)then exit;
    lkSQL := 'DELETE FROM TABL$D_1000017 D WHERE (D.ID = '''+dtsDoc.FieldByName('ID').AsString+''')';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actDocInsert_OnExecute(Sender :TObject);
  begin    
    if not dtsDoc.Active then exit;
    if(dtsDoc.State <> dsBrowse)then
      try dtsDoc.Post; finally end;     
    try
      dtsDoc.Append;
    finally
      dtsDoc.Post;
    end;
  end;
  //============================================================================
  procedure actDocClone_OnExecute(Sender :TObject);
  var
    lkSQL :string;
  begin    
    if not dtsDoc.Active then exit;  
    if not(dtsDoc.RecordCount>0)then exit;  
    if(Dialogs.MessageDlg('Копировать позицию в документе в новую ?', mtConfirmation, [mbYes, mbNo]) <> mrYes)then exit;
    lkSQL := 
      'INSERT INTO TABL$D_1000017(NAME, FLAG_DELETE, J_ID, FLAG_DEBET, ACC_ID '+
      '  ,SUBKONTO_ID, SUBKONTO_NAME, TAX_ID, SUBTYPE_ID, J_REASON_ID '+
      '  ,J_REASON_SUM, J_REASON_NDP, J_REASON_DONE, FLAG_OLD, PAYSUM '+
      '  ,PAYSUMCLEAR, PAYSUMNDP, EXPTYPE_ID, FILIAL_ID, FLAG_UPDNDP) '+
      'SELECT D.NAME, D.FLAG_DELETE, D.J_ID, D.FLAG_DEBET, D.ACC_ID '+
      '      ,D.SUBKONTO_ID, D.SUBKONTO_NAME, D.TAX_ID, D.SUBTYPE_ID, 0 AS J_REASON_ID '+
      '      ,0 AS J_REASON_SUM, 0 AS J_REASON_NDP, 0 AS J_REASON_DONE, D.FLAG_OLD, D.PAYSUM '+
      '      ,D.PAYSUMCLEAR, D.PAYSUMNDP, D.EXPTYPE_ID, D.FILIAL_ID, D.FLAG_UPDNDP '+
      'FROM   TABL$D_1000017 D '+
      'WHERE  (D.ID = '+dtsDoc.FieldByName('ID').AsString+') ';
    CloseDataSets;
    ExecSQL(dtsJournal.DataBase, lkSQL);
    RefreshView;
  end;
  //============================================================================
  procedure actDoc661_OnExecute(Sender :TObject);
  var
    lkSQL :string;
    lkJ_ID :string;
  begin    
    if not dtsDoc.Active then exit;  
    lkSQL := StringsLoadFromFile(StrAbsolutePath('./UPD_1000017_ACT661.SQL',ScriptName));
    lkJ_ID := dtsJournal.FieldByName('ID').AsString;
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, ['J_ID'],[lkJ_ID]);
    RefreshView;
  end;
  //============================================================================
  procedure actDoc6611_OnExecute(Sender :TObject);
  var
    lkSQL :string;
    lkJ_ID :string;
  begin    
    if not dtsDoc.Active then exit;  
    lkSQL := StringsLoadFromFile(StrAbsolutePath('./UPD_1000017_ACT6611.SQL',ScriptName));
    lkJ_ID := dtsJournal.FieldByName('ID').AsString;
    CloseDataSets;
    DocForm_ExecSQLParams([], lkSQL, ['J_ID'],[lkJ_ID]);
    RefreshView;
  end;
  //============================================================================
  procedure evDoc_OnEventAlert(Sender :TObject; EventName: string; EventCount: LongInt; var CancelAlerts: Boolean);
  begin
    RefreshView; 
    CancelAlerts := false;
  end;
  //============================================================================
  procedure DocForm_OnClose(Sender :TObject; var Action :TCloseAction);
  begin
    CloseDataSets;
    Action := caFree;
    if evDoc.Registered then 
      evDoc.UnRegisterEvents;
  end; 
  //============================================================================
  function DocForm_Create:TAmunhotepForm;
  var
    lkJ_ID     :string;
    lkFileName :string;
    lkResBody  :string;
    lkStrm     :TMemoryStream;
    lkImgLogo  :TImage;
    lkLbl      :TLabel;
    lkAct      :TAction;
    lkTS       :TTabSheet;
    lkPM       :TPopupMenu;
    lkMM       :TMainMenu;
    lkCol      :TColumnEh;
    i          :Integer;
  begin
    lkJ_ID := GetGlobalVariable('J_ID');
    with Amunhotep.MainForm do
      for i:=0 to MDIChildCount-1 do
        if(MDIChildren[i].HelpKeyWord = lkJ_ID)then
          begin
          MDIChildren[i].BringToFront;
          exit;
          end;
    DontAutoFree;
    lkFileName := StrAbsolutePath('./EDIT.XFM', ScriptName);
    lkResBody  := StringsLoadFromFile(lkFileName);
    if(lkResBody = '')then 
      begin
      Dialogs.MessageDlg(msg_invalid_resource+SQLCRLF+lkFileName, mtWarning, [mbOK]);
      exit;
      end;
    Result             := TAmunhotepForm(StrToComponent(lkResBody));
    Result.HelpKeyWord := lkJ_ID;
    Result.OnClose     := @DocForm_OnClose;
    try
      lkStrm := TMemoryStream.Create;
      if StreamLoadFromFile(PrepareAbsoleteFileName(ERP_ObjectIcon(ERP_OBJECTTYPE_DOC)),lkStrm)then
        Result.Icon.LoadFromStream(lkStrm);
    finally
      lkStrm.Free;
    end;
    TopBar := TxcGradientPanelVista(Result.FindComponent('TopBar')); 
    with TopBar do 
      begin 
      Caption    := #$20#$20#$20#$20#$20#$20; 
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Window; 
      Font.Name  := 'Verdana'; 
      Font.Size  := 14; 
      Font.Style := [fsBold]; 
      StyleManager          := nil;
      Colors.HotTrack       := ERP_ObjectColorLight(ERP_OBJECTTYPE_DOC);
      Colors.HotTrackBorder := ERP_ObjectColor(ERP_OBJECTTYPE_DOC);
      end; 
    lkImgLogo := TImage(Result.FindComponent('ImgLogo')); 
    try 
      lkStrm  := TMemoryStream.Create; 
      if StreamLoadFromFile(PrepareAbsoleteFileName(ERP_ObjectBitmap(ERP_OBJECTTYPE_DOC)), lkStrm)then 
        lkImgLogo.Picture.Bitmap.LoadFromStream(lkStrm); 
    finally 
      lkStrm.Free; 
    end; 
    ToolBar         := TxcGradientPanelVista(Result.FindComponent('ToolBar'));
    PanelDoc       := TxcPanel(Result.FindComponent('PanelDoc'));
    PanelClient     := TxcGradientPanel(Result.FindComponent('PanelClient'));
    PanelToolBarDoc := TxcGradientPanelVista(Result.FindComponent('PanelToolBarDoc'));

    lkLbl := TLabel(Result.FindComponent('lblDate'      )); lkLbl.Caption := msg_lbldate ;
    lkLbl := TLabel(Result.FindComponent('lblNAME'      )); lkLbl.Caption := msg_lblname ;
    lkLbl := TLabel(Result.FindComponent('lblFilial'    )); lkLbl.Caption := msg_lblfilial ;
    lkLbl := TLabel(Result.FindComponent('lblUser'      )); lkLbl.Caption := msg_lbluser ;
    lkLbl := TLabel(Result.FindComponent('lblID'        )); lkLbl.Caption := msg_lblid ;
    lkLbl := TLabel(Result.FindComponent('lblNumber'    )); lkLbl.Caption := msg_lblnumber ;
    lkLbl := TLabel(Result.FindComponent('lblNumberFull')); lkLbl.Caption := msg_lblnumberfull ;
    lkLbl := TLabel(Result.FindComponent('lblNumberIn'  )); lkLbl.Caption := msg_lblnumberin ;
    lkLbl := TLabel(Result.FindComponent('lblFirm'      )); lkLbl.Caption := msg_lblfirm ;
    lkLbl := TLabel(Result.FindComponent('lblUserWrk'   )); lkLbl.Caption := msg_lbluserwrk ;
    dbeNAME := TDBEditEh(Result.FindComponent('dbeNAME'));
    with dbeNAME do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      end; 
    dbdtpDATE_COMMIT := TDBDateTimeEditEh(Result.FindComponent('dbdtpDATE_COMMIT'));
    with dbdtpDATE_COMMIT do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      end; 
    dbeID := TDBEditEh(Result.FindComponent('dbeID'));
    with dbeID do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 
    dbeDOCNUMBER := TDBEditEh(Result.FindComponent('dbeDOCNUMBER'));
    with dbeDOCNUMBER do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN007.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        Hint    := 'Генерировать номер документа';
        OnClick := @dbeDOCNUMBER_OnEditButtonClick;
        end;
      end; 
    dbeDOCNUMBERSTR := TDBEditEh(Result.FindComponent('dbeDOCNUMBERSTR'));
    with dbeDOCNUMBERSTR do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 
    dbeDOCNUMBERIN := TDBEditEh(Result.FindComponent('dbeDOCNUMBERIN'));
    with dbeDOCNUMBERIN do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      end; 
    dbeFIRM_ID_ := TDBEditEh(Result.FindComponent('dbeFIRM_ID_'));
    with dbeFIRM_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 
    dbeFILIAL_ID_  := TDBEditEh(Result.FindComponent('dbeFILIAL_ID_'));
    with dbeFILIAL_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeFILIAL_ID__OnEditButtonClick;
        end;
      end; 
    dbeUSER_ID := TDBEditEh(Result.FindComponent('dbeUSER_ID'));
    with dbeUSER_ID do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbeUSER_ID_OnEditButtonClick;
        end;
      end; 
    dbeWRK_NAME  := TDBEditEh(Result.FindComponent('dbeWRK_NAME'));
    with dbeWRK_NAME do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      end; 
    dbePAYSRC_ID_  := TDBEditEh(Result.FindComponent('dbePAYSRC_ID_'));
    with dbePAYSRC_ID_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbePAYSRC_ID__OnEditButtonClick;
        end;
      end; 
    dbePAYSRC_ID_NDP_  := TDBEditEh(Result.FindComponent('dbePAYSRC_ID_NDP_'));
    with dbePAYSRC_ID_NDP_ do 
      begin 
      Color      := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color := Amunhotep.MainForm.StyleManager.Colors.Border;
      ReadOnly   := true;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbePAYSRC_ID_NDP__OnEditButtonClick;
        end;
      with EditButtons.Add do
        begin
        Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
        Style   := ebsGlyphEh;
        Visible := true;
        OnClick := @dbePAYSRC_ID_NDP_Clear_OnEditButtonClick;
        end;
      end; 
    dbgDoc := TDBGridEh(Result.FindComponent('dbgDoc'));
    with dbgDoc do 
      begin 
      Color             := Amunhotep.MainForm.StyleManager.Colors.Window;
      Font.Color        := Amunhotep.MainForm.StyleManager.Colors.Border;
      FixedColor        := Amunhotep.MainForm.StyleManager.Colors.Foreground;
      TitleFont.Color   := Amunhotep.MainForm.StyleManager.Colors.Border;
      TitleFont.Style   := [fsBold];
      FooterFont.Color  := Amunhotep.MainForm.StyleManager.Colors.Border;
      FooterFont.Style  := [fsBold];
      OptionsEh         := OptionsEh + [dghFixed3D,dghFooter3D,dghHighlightFocus,dghDialogFind,dghColumnResize,dghColumnMove,dghExtendVertLines];
      UseMultiTitle     := true;
      DrawMemoText      := true; 
      FrozenCols        := 0; 
      FooterRowCount    := 1; 
      VTitleMargin      := 4;
      RowLines          := 2;
      RowPanel.Active   := true;
      SumList.Active    := true; 
      AllowedOperations := [alopAppendEh, alopUpdateEh, alopDeleteEh];
      Columns.Clear;
      lkCol := CreateTColumnEh(dbgDoc, 'FLAG_DEBET','','проводка', 56, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        KeyList.Clear   ; PickList.Clear;
        KeyList.Add('0'); PickList.Add('кредит');
        KeyList.Add('1'); PickList.Add('дебет');
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'ID', '#0 ', '№ записи', 56, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'ACC_CODE','','счет', 60, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Выбрать из плана счетов';
          Visible := true;
          ShortCut:= TextToShortCut('Alt+Down');
          OnClick := @dbgDoc_ACC_ID_Edit_OnClick;
          end;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'SUBKONTO_NAME','','субконто',360, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Выбрать';
          Visible := true;
          ShortCut:= TextToShortCut('Alt+Down');
          OnClick := @dbgDoc_SUBKONTO_NAME_Edit_OnClick;
          end;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'PAYSUM','# ### ##0.00','сумма', 72, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'PAYSUMCLEAR','# ### ##0.00','чистая', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := FixedColor;
        ReadOnly     := true;
        Footer.Color := lkCol.Color;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'FLAG_UPDNDP','','X', 19, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        CheckBoxes   := true;
        KeyList.Clear ; KeyList.Add('1') ; KeyList.Add('0');
        PickList.Clear; PickList.Add('X'); PickList.Add(' ');
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'PAYSUMNDP','# ### ##0.00','НДС', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := lkCol.Color;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'J_REASON_DOCSTR','','документ',421, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 1;
        Color        := FixedColor + $101010;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Выбрать';
          Visible := true;
          ShortCut:= TextToShortCut('Alt+Down');
          OnClick := @dbgDoc_J_REASON_DOCSTR_Edit_OnClick;
          end;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN002.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Очистить';
          Visible := true;
          OnClick := @dbgDoc_J_REASON_DOCSTR_Clear_OnClick;
          end;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'J_REASON_SUM','# ### ##0.00','сумма', 72, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        Footer.Color := lkCol.Color;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;                      
      lkCol := CreateTColumnEh(dbgDoc, 'J_REASON_CLEAR','# ### ##0.00','чистая', 60, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        Footer.Color := lkCol.Color;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;                      
      lkCol := CreateTColumnEh(dbgDoc, 'J_REASON_NDP','# ### ##0.00','НДС', 80, taRightJustify);
      with lkCol do
        begin
        InRowLinePos := 1;
        Color        := FixedColor;
        ReadOnly     := true;
        Footer.Color := FixedColor;
        Footer.Color := lkCol.Color;
        Footer.Alignment     := taRightJustify;
        Footer.DisplayFormat := '#0.00 ';
        Footer.ValueType     := fvtSum;
        end;                      
      lkCol := CreateTColumnEh(dbgDoc, 'J_ID_PAYMENT','#0','оплата', 72, taRightJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 0;
        Color        := FixedColor;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'редактировать';
          Visible := true;
          ShortCut:= TextToShortCut('Alt+Down');
          OnClick := @dbgDoc_J_ID_PAYMENT_Edit_OnClick;
          end;
        end;                      
      lkCol := CreateTColumnEh(dbgDoc, 'J_ID_LOAD','#0','отгрузка', 72, taRightJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 1;
        Color        := FixedColor;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'редактировать';
          Visible := true;
          ShortCut:= TextToShortCut('Alt+Down');
          OnClick := @dbgDoc_J_ID_LOAD_Edit_OnClick;
          end;
        end;                      
      lkCol := CreateTColumnEh(dbgDoc, 'NAME','','содержание проводки',322, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        with MRUList do
          begin
          Active := true;
          Items.Clear;
          Items.Add('Оплата товаров, доставки или предоставления услуг');
          Items.Add('Выплата аванса заработной платы');
          Items.Add('Выплата заработной платы');
          Items.Add('Оплата налогов и сборов');
          end; 
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'FILIAL_NAME','','относить к филиалу',160, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 0;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Выбрать';
          Visible := true;
          ShortCut:= TextToShortCut('Alt+Down');
          OnClick := @dbgDoc_FILIAL_NAME_Edit_OnClick;
          end;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'TAX_ID','','тип налога', 128, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 1;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        TColumnEh_FillKeyList('TABL$R_TAXES','ID','NAME','(ID IN (1000008,1000010))', KeyList, PickList);
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'FLAG_OLD','','старый долг',72, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 1;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        KeyList.Clear   ; PickList.Clear;
        KeyList.Add('0'); PickList.Add(' ');
        KeyList.Add('1'); PickList.Add('старый долг');
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'SUBTYPE_ID','','вид прихода/расхода',120, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 1;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        KeyList.Clear   ; PickList.Clear;
        KeyList.Add('0'); PickList.Add('Прочий приход или расход');
        KeyList.Add('1'); PickList.Add('Облагаемый доход или расход в связи с ведением хоз.деятельности');
        KeyList.Add('2'); PickList.Add('Необлагаемый доход или расход в связи с ведением хоз. деятельности');
        KeyList.Add('3'); PickList.Add('Выручка (возврат) от реализации товаров, продукции, услуг');
        KeyList.Add('4'); PickList.Add('Выручка (возврат) от реализации основных фондов');
        Footer.Color := FixedColor;
        end;
      lkCol := CreateTColumnEh(dbgDoc, 'EXPTYPE_NAME','','вид В.Д./В.Р.',160, taLeftJustify);
      with lkCol do
        begin
        AlwaysShowEditButton := true;
        InRowLinePos := 1;
        Color        := Amunhotep.MainForm.StyleManager.Colors.Window;
        ReadOnly     := false;
        Footer.Color := FixedColor;
        with EditButtons.Add do
          begin
          Glyph.LoadFromFile(PrepareAbsoleteFileName('PEAKTOP:IMG/CONFIG/DBGRID/BTN000.BMP'));
          Style   := ebsGlyphEh;
          Hint    := 'Выбрать';
          Visible := true;
          ShortCut:= TextToShortCut('Alt+Down');
          OnClick := @dbgDoc_EXPTYPE_NAME_Edit_OnClick;
          end;
        end;
      end; 
    trJournal := TxFBTransaction(Result.FindComponent('trJournal'));
    with trJournal do 
      begin 
      DefaultDataBase := FBDataBase; 
      Params.Clear; 
      Params.Add('isc_tpb_read_committed'); 
      Params.Add('isc_tpb_write'); 
      Params.Add('isc_tpb_rec_version'); 
      Params.Add('isc_tpb_nowait'); 
      end; 
    dtsJournal := TxFBDataSet(Result.FindComponent('dtsJournal'));
    with dtsJournal do
      begin 
      AfterOpen   := @dtsJournal_AfterOpen;
      BeforeClose := @dtsJournal_BeforeClose;
      AfterScroll := @dtsJournal_AfterScroll;
      SelectSQL.Text  := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG/DOC/1000017/EDIT_JRNL0001.SQL');
      RefreshSQL.Text := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG/DOC/1000017/EDIT_JRNL0001.SQL');
      ModifySQL.Text := 
        'EXECUTE BLOCK ( '+SQLCRLF+
        '  QID           DOMN$PSTRING  = ?ID '+SQLCRLF+
        ' ,QNAME         DOMN$PSTRING  = ?NAME '+SQLCRLF+
        ' ,QDATE_COMMIT  DOMN$DATETIME = ?DATE_COMMIT '+SQLCRLF+
        ' ,QDOCNUMBER    DOMN$INTEGER  = ?DOCNUMBER '+SQLCRLF+
        ' ,QDOCNUMBERIN  DOMN$PSTRING  = ?DOCNUMBERIN '+SQLCRLF+
        ')AS'+SQLCRLF+
        'BEGIN '+SQLCRLF+
        '  UPDATE TABL$J_4 J SET '+SQLCRLF+
        '     J.NAME        = :QNAME '+SQLCRLF+
        '    ,J.DATE_COMMIT = :QDATE_COMMIT '+SQLCRLF+
        '    ,J.DOCNUMBER   = :QDOCNUMBER '+SQLCRLF+
        '    ,J.DOCNUMBERIN = :QDOCNUMBERIN '+SQLCRLF+
        '  WHERE (J.ID = :QID); '+SQLCRLF+
        'END ';
      end 
    dtsDoc := TxFBDataSet(Result.FindComponent('dtsDoc'));
    with dtsDoc do
      begin 
      with GeneratorField do
        begin 
        ApplyEvent := gamOnServer;
        Field      := 'ID';
        Generator  := 'GENR$D_1000017_ID';
        IncrementBy:= 1;
        end;
      SelectSQL.Text  := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG2/DOC/1000017/EDIT_D1000017S.SQL');
      RefreshSQL.Text := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG2/DOC/1000017/EDIT_D1000017R.SQL');
      InsertSQL.Text  := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG2/DOC/1000017/EDIT_D1000017I.SQL');
      ModifySQL.Text  := StringsLoadFromFile('PEAKTOP:IDE/ERP/CONFIG2/DOC/1000017/EDIT_D1000017U.SQL');
      DeleteSQL.Text  := 'DELETE FROM TABL$D_1000017 B WHERE (B.ID = ?ID) ';
      AfterOpen       := @dtsDoc_AfterOpen;
      BeforeClose     := @dtsDoc_BeforeClose;
      AfterScroll     := @dtsDoc_AfterScroll;
      OnNewRecord     := @dtsDoc_OnNewRecord;
      end 
    DSdtsJournal := TDataSource(Result.FindComponent('DSdtsJournal'));
    DSdtsDoc     := TDataSource(Result.FindComponent('DSdtsDoc'));
    evDoc := TxFBEvents(Result.FindComponent('evDoc'));
    with evDoc do
      begin 
      Events.Clear;
      Events.Add('TABL$J_4');
      Events.Add('TABL$J_1000017');
      Events.Add('TABL$D_1000017');
      OnEventAlert := @evDoc_OnEventAlert;
      //if not Registered then 
      //  RegisterEvents; 
      end; 
    lkAct := FindTAction(Result,'actRefresh'      ,msg_actrefresh       ,msg_actrefresh_hint      ,SHORTCUT_DATA_REFRESH, 0,170); lkAct.OnExecute:=@actRefresh_OnExecute      ; 
    lkAct := FindTAction(Result,'actPrint'        ,msg_actprint         ,msg_actprint_hint        ,SHORTCUT_PRINT       , 0,105); lkAct.OnExecute:=@actPrint_OnExecute        ; lkAct.OnUpdate:=@actPrint_OnUpdate; 
    lkAct := FindTAction(Result,'actCommit'       ,msg_actcommit        ,msg_actcommit_hint       ,SHORTCUT_DOC_COMMIT  , 0,298); lkAct.OnExecute:=@actCommit_OnExecute       ; lkAct.OnUpdate:=@actCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actUnCommit'     ,msg_actuncommit      ,msg_actuncommit_hint     ,SHORTCUT_DOC_UNCOMMIT, 0,297); lkAct.OnExecute:=@actUnCommit_OnExecute     ; lkAct.OnUpdate:=@actUnCommit_OnUpdate; 
    lkAct := FindTAction(Result,'actDocInsert'    ,msg_actdocinsert     ,msg_actdocinsert_hint    ,''                   , 0,176); lkAct.OnExecute:=@actDocInsert_OnExecute    ; lkAct.OnUpdate:=@actCommit_OnUpdate;
    lkAct := FindTAction(Result,'actDocDelete'    ,msg_actdocdelete     ,msg_actdocdelete_hint    ,''                   , 0,177); lkAct.OnExecute:=@actDocDelete_OnExecute    ; lkAct.OnUpdate:=@actCommit_OnUpdate;
    lkAct := FindTAction(Result,'actDocClone'     ,'Копировать'         ,'Копировать позицию в документе' ,''           , 0, 68); lkAct.OnExecute:=@actDocClone_OnExecute     ; lkAct.OnUpdate:=@actCommit_OnUpdate;
    lkAct := FindTAction(Result,'actDoc661'       ,msg_actdoc661        ,msg_actdoc661_hint       ,''                   , 0,345); lkAct.OnExecute:=@actDoc661_OnExecute       ; lkAct.OnUpdate:=@actCommit_OnUpdate;
    lkAct := FindTAction(Result,'actDoc6611'      ,msg_actdoc6611       ,msg_actdoc6611_hint      ,''                   , 0,345); lkAct.OnExecute:=@actDoc6611_OnExecute      ; lkAct.OnUpdate:=@actCommit_OnUpdate;
    RefreshView;
    Amunhotep.MainForm.TaskBar.ButtonByForm(Result).Down := true;
  end;
  //============================================================================
begin
  DocForm := DocForm_Create;
end.
