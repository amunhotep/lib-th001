CREATE OR ALTER PROCEDURE PROC$_EXCHANGE_J_4_ARC (
  Q_DATABASEPATH TYPE OF COLUMN TABL$R_FILIALS.DATABASE_NAME,
  Q_USERNAME     TYPE OF COLUMN TABL$_USERS.ID,
  Q_USERPWD      TYPE OF COLUMN TABL$_USERS.PWD,
  Q_FILIAL_ID    TYPE OF COLUMN TABL$R_FILIALS.ID)
RETURNS (
  TYPE_ID TYPE OF COLUMN TABL$_TB_TYPES.ID,
  NAME    TYPE OF COLUMN TABL$_TB.NAME,
  CNT     DOMN$INTEGER)
AS
  DECLARE VARIABLE P_ID_MAX           TYPE OF COLUMN TABL$J_4.ID;
  DECLARE VARIABLE P_ID               TYPE OF COLUMN TABL$J_4.ID;
  DECLARE VARIABLE P_NEW_ID           TYPE OF COLUMN TABL$J_4.ID;
  DECLARE VARIABLE P_NAME             TYPE OF COLUMN TABL$J_4.NAME;
  DECLARE VARIABLE P_FLAG_DELETE      TYPE OF COLUMN TABL$J_4.FLAG_DELETE;
  DECLARE VARIABLE P_FLAG_COMMIT      TYPE OF COLUMN TABL$J_4.FLAG_COMMIT;
  DECLARE VARIABLE P_TYPE_ID          TYPE OF COLUMN TABL$J_4.TYPE_ID;
  DECLARE VARIABLE P_DOCNUMBER        TYPE OF COLUMN TABL$J_4.DOCNUMBER;
  DECLARE VARIABLE P_DOCSUMVAL        TYPE OF COLUMN TABL$J_4.DOCSUMVAL;
  DECLARE VARIABLE P_VALUTE_ID        TYPE OF COLUMN TABL$J_4.VALUTE_ID;
  DECLARE VARIABLE P_FIRM_ID          TYPE OF COLUMN TABL$J_4.FIRM_ID;
  DECLARE VARIABLE P_USER_ID          TYPE OF COLUMN TABL$J_4.USER_ID;
  DECLARE VARIABLE P_DATE_COMMIT      TYPE OF COLUMN TABL$J_4.DATE_COMMIT;

  DECLARE VARIABLE P_SQL_STMT         TYPE OF COLUMN TABL$J_4.DOCSTR;
BEGIN
  TYPE_ID = 4;
  CNT     = 0;
  SELECT FIRST 1 TB.NAME FROM TABL$_TB_TYPES TB WHERE(TB.ID = :TYPE_ID) INTO :NAME;
  -- EXECUTE LOCAL !
  EXECUTE STATEMENT 'ALTER SEQUENCE GENR$J_ID RESTART WITH -999999;';

  SELECT COALESCE(MAX(J4.ID),0)
  FROM   TABL$J_4 J4
  INTO   :P_ID_MAX;  IF(:P_ID_MAX IS NULL)THEN P_ID_MAX = 0;

  P_SQL_STMT =
    'SELECT J.ID, J.NAME, J.FLAG_DELETE, J.FLAG_COMMIT, J.TYPE_ID, J.DOCNUMBER, '||
    '       J.DOCSUMVAL, J.VALUTE_ID, J.FIRM_ID, J.USER_ID, J.DATE_COMMIT '||
    'FROM   TABL$J_4 J '||
    'WHERE  (J.ID > '''||:P_ID_MAX||''') AND (J.TYPE_ID <> 1000024) '||
    'ORDER BY J.ID ';

  FOR
    EXECUTE STATEMENT :P_SQL_STMT
      ON EXTERNAL DATA SOURCE :Q_DATABASEPATH AS USER :Q_USERNAME PASSWORD :Q_USERPWD
      WITH AUTONOMOUS TRANSACTION
    INTO :P_ID, :P_NAME, :P_FLAG_DELETE, :P_FLAG_COMMIT, :P_TYPE_ID, :P_DOCNUMBER,
         :P_DOCSUMVAL, :P_VALUTE_ID, :P_FIRM_ID, :P_USER_ID, :P_DATE_COMMIT
  DO
      BEGIN
      UPDATE OR INSERT INTO TABL$J_4(ID, NAME, FLAG_DELETE, FLAG_COMMIT, TYPE_ID, DOCNUMBER,
         DOCSUMVAL, VALUTE_ID, FIRM_ID, FILIAL_ID, USER_ID, DATE_COMMIT
      )VALUES (:P_ID, :P_NAME, :P_FLAG_DELETE, 0, :P_TYPE_ID, :P_DOCNUMBER,
       :P_DOCSUMVAL, :P_VALUTE_ID, :P_FIRM_ID, :Q_FILIAL_ID, :P_USER_ID, :P_DATE_COMMIT
      )MATCHING(ID)RETURNING ID INTO :P_NEW_ID;

      UPDATE TABL$J_4 H4 SET
        H4.ID      = :P_ID
       ,H4.USER_ID = :P_USER_ID
      WHERE (H4.ID = :P_NEW_ID);

      NAME = :P_ID||'-'||:P_USER_ID||'-['||:P_DATE_COMMIT||']-"'||:P_NAME||'"';
      SUSPEND;

      FOR
        SELECT P1CHILDS.TYPE_ID, P1CHILDS.NAME, P1CHILDS.CNT
        FROM   PROC$_EXCHANGE_J_CHILDS_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1CHILDS
        INTO   :TYPE_ID, :NAME, :CNT
      DO
        SUSPEND;

      IF(EXISTS(
        SELECT TMP.ID
        FROM (   WITH RECURSIVE TT AS(
                  SELECT TT1.ID, TT1.PARENT_ID FROM TABL$_TB_TYPES TT1 WHERE (TT1.ID = :P_TYPE_ID)
                  UNION ALL
                  SELECT TT2.ID, TT2.PARENT_ID FROM TABL$_TB_TYPES TT2, TT TT3 WHERE (TT2.ID = TT3.PARENT_ID)
                )SELECT TTT.ID FROM TT TTT) TMP
        WHERE (TMP.ID = 1000014)
      ))THEN
        FOR
          SELECT P1000014.TYPE_ID, P1000014.NAME, P1000014.CNT
          FROM   PROC$_EXCHANGE_J_1000014_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1000014
          INTO   :TYPE_ID, :NAME, :CNT
        DO
          SUSPEND;

      IF(EXISTS(
        SELECT TMP.ID
        FROM (   WITH RECURSIVE TT AS(
                  SELECT TT1.ID, TT1.PARENT_ID FROM TABL$_TB_TYPES TT1 WHERE (TT1.ID = :P_TYPE_ID)
                  UNION ALL
                  SELECT TT2.ID, TT2.PARENT_ID FROM TABL$_TB_TYPES TT2, TT TT3 WHERE (TT2.ID = TT3.PARENT_ID)
                )SELECT TTT.ID FROM TT TTT) TMP
        WHERE (TMP.ID = 1000016)
      ))THEN
      FOR
        SELECT P1000016.TYPE_ID, P1000016.NAME, P1000016.CNT
        FROM   PROC$_EXCHANGE_J_1000016_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1000016
        INTO   :TYPE_ID, :NAME, :CNT
      DO
        SUSPEND;

      IF(EXISTS(
        SELECT TMP.ID
        FROM (   WITH RECURSIVE TT AS(
                  SELECT TT1.ID, TT1.PARENT_ID FROM TABL$_TB_TYPES TT1 WHERE (TT1.ID = :P_TYPE_ID)
                  UNION ALL
                  SELECT TT2.ID, TT2.PARENT_ID FROM TABL$_TB_TYPES TT2, TT TT3 WHERE (TT2.ID = TT3.PARENT_ID)
                )SELECT TTT.ID FROM TT TTT) TMP
        WHERE (TMP.ID = 1000062)
      ))THEN
      FOR
        SELECT P1000062.TYPE_ID, P1000062.NAME, P1000062.CNT
        FROM   PROC$_EXCHANGE_J_1000062_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1000062
        INTO   :TYPE_ID, :NAME, :CNT
      DO
        SUSPEND;

      IF(EXISTS(
        SELECT TMP.ID
        FROM (   WITH RECURSIVE TT AS(
                  SELECT TT1.ID, TT1.PARENT_ID FROM TABL$_TB_TYPES TT1 WHERE (TT1.ID = :P_TYPE_ID)
                  UNION ALL
                  SELECT TT2.ID, TT2.PARENT_ID FROM TABL$_TB_TYPES TT2, TT TT3 WHERE (TT2.ID = TT3.PARENT_ID)
                )SELECT TTT.ID FROM TT TTT) TMP
        WHERE (TMP.ID = 1000063)
      ))THEN
      FOR
        SELECT P1000063.TYPE_ID, P1000063.NAME, P1000063.CNT
        FROM   PROC$_EXCHANGE_J_1000063_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1000063
        INTO   :TYPE_ID, :NAME, :CNT
      DO
        SUSPEND;

      IF(:P_TYPE_ID = 1000066)THEN
        BEGIN
        FOR
          SELECT P1000014.TYPE_ID, P1000014.NAME, P1000014.CNT
          FROM   PROC$_EXCHANGE_D_1000014_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1000014
          INTO   :TYPE_ID, :NAME, :CNT
        DO
          SUSPEND;
        END

      IF(EXISTS(
        SELECT TMP.ID
        FROM (   WITH RECURSIVE TT AS(
                  SELECT TT1.ID, TT1.PARENT_ID FROM TABL$_TB_TYPES TT1 WHERE (TT1.ID = :P_TYPE_ID)
                  UNION ALL
                  SELECT TT2.ID, TT2.PARENT_ID FROM TABL$_TB_TYPES TT2, TT TT3 WHERE (TT2.ID = TT3.PARENT_ID)
                )SELECT TTT.ID FROM TT TTT) TMP
        WHERE (TMP.ID = 1000067)
      ))THEN
      FOR
        SELECT P1000067.TYPE_ID, P1000067.NAME, P1000067.CNT
        FROM   PROC$_EXCHANGE_J_1000067_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1000067
        INTO   :TYPE_ID, :NAME, :CNT
      DO
        SUSPEND;

      IF(EXISTS(
        SELECT TMP.ID
        FROM (   WITH RECURSIVE TT AS(
                  SELECT TT1.ID, TT1.PARENT_ID FROM TABL$_TB_TYPES TT1 WHERE (TT1.ID = :P_TYPE_ID)
                  UNION ALL
                  SELECT TT2.ID, TT2.PARENT_ID FROM TABL$_TB_TYPES TT2, TT TT3 WHERE (TT2.ID = TT3.PARENT_ID)
                )SELECT TTT.ID FROM TT TTT) TMP
        WHERE (TMP.ID = 1000069)
      ))THEN
      FOR
        SELECT P1000067.TYPE_ID, P1000067.NAME, P1000067.CNT
        FROM   PROC$_EXCHANGE_J_1000069_ARC(:Q_DATABASEPATH, :Q_USERNAME, :Q_USERPWD, :Q_FILIAL_ID, :P_ID) P1000067
        INTO   :TYPE_ID, :NAME, :CNT
      DO
        SUSPEND;

      UPDATE TABL$J_4 J1 SET J1.DOCSUMVAL = :P_DOCSUMVAL WHERE (J1.ID = :P_ID);
      IF(:P_FLAG_COMMIT = 1)THEN
        UPDATE TABL$J_4 J2 SET J2.FLAG_COMMIT = 1 WHERE (J2.ID = :P_ID);

      CNT = :CNT + 1;
      END

  -- GET SEQUENCE VALUE
  P_ID = 0;
  P_SQL_STMT = 'SELECT FIRST 1 GEN_ID(GENR$J_ID, 0) FROM RDB$DATABASE ';
  EXECUTE STATEMENT :P_SQL_STMT
    ON EXTERNAL DATA SOURCE :Q_DATABASEPATH AS USER :Q_USERNAME PASSWORD :Q_USERPWD
    WITH AUTONOMOUS TRANSACTION
    INTO :P_ID;
  -- EXECUTE LOCAL !
  EXECUTE STATEMENT 'ALTER SEQUENCE GENR$J_ID RESTART WITH '||:P_ID||';';
  SUSPEND;
END
